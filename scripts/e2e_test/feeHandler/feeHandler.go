// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package feeHandler

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// FeeHandlerMetaData contains all meta data concerning the FeeHandler contract.
var FeeHandlerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_bridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feePercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_gasUsed\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_oracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"fromDomainID\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"destinationDomainID\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"feeData\",\"type\":\"bytes\"}],\"name\":\"calculateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"fromDomainID\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"destinationDomainID\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"feeData\",\"type\":\"bytes\"}],\"name\":\"collectFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"}],\"name\":\"setFeeOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"gasUsed\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"feePercent\",\"type\":\"uint16\"}],\"name\":\"setFeeProperties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60a06040523480156200001157600080fd5b50604051620033903803806200339083398181016040528101906200003791906200026a565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050620000806000801b336200008760201b60201c565b506200029c565b6200009982826200009d60201b60201c565b5050565b620000af82826200018e60201b60201c565b6200018a57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506200012f620001f860201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002328262000205565b9050919050565b620002448162000225565b81146200025057600080fd5b50565b600081519050620002648162000239565b92915050565b60006020828403121562000283576200028262000200565b5b6000620002938482850162000253565b91505092915050565b6080516130c3620002cd600039600081816105140152818161078c01528181610a770152610d5801526130c36000f3fe6080604052600436106100f35760003560e01c806391d148541161008a578063c297983f11610059578063c297983f1461031b578063d547741f14610344578063ef4f081f1461036d578063fc818cfb146103ab576100f3565b806391d1485414610261578063a217fddf1461029e578063a8a98962146102c9578063bff42755146102f2576100f3565b8063318c136e116100c6578063318c136e146101b757806336568abe146101e2578063692229481461020b5780636fb7cb5714610236576100f3565b806301ffc9a7146100f8578063248a9ca31461013557806325307065146101725780632f2ff15d1461018e575b600080fd5b34801561010457600080fd5b5061011f600480360381019061011a9190611b4c565b6103d6565b60405161012c9190611b94565b60405180910390f35b34801561014157600080fd5b5061015c60048036038101906101579190611be5565b610450565b6040516101699190611c21565b60405180910390f35b61018c60048036038101906101879190611d38565b61046f565b005b34801561019a57600080fd5b506101b560048036038101906101b09190611e07565b6104e9565b005b3480156101c357600080fd5b506101cc610512565b6040516101d99190611e56565b60405180910390f35b3480156101ee57600080fd5b5061020960048036038101906102049190611e07565b610536565b005b34801561021757600080fd5b506102206105b9565b60405161022d9190611e8e565b60405180910390f35b34801561024257600080fd5b5061024b6105cd565b6040516102589190611e56565b60405180910390f35b34801561026d57600080fd5b5061028860048036038101906102839190611e07565b6105f3565b6040516102959190611b94565b60405180910390f35b3480156102aa57600080fd5b506102b361065d565b6040516102c09190611c21565b60405180910390f35b3480156102d557600080fd5b506102f060048036038101906102eb9190611ea9565b610664565b005b3480156102fe57600080fd5b5061031960048036038101906103149190611f82565b6106f4565b005b34801561032757600080fd5b50610342600480360381019061033d919061207f565b61091a565b005b34801561035057600080fd5b5061036b60048036038101906103669190611e07565b6109a8565b005b34801561037957600080fd5b50610394600480360381019061038f9190611d38565b6109d1565b6040516103a29291906120d8565b60405180910390f35b3480156103b757600080fd5b506103c06109f5565b6040516103cd9190612110565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610449575061044882610a0b565b5b9050919050565b6000806000838152602001908152602001600020600101549050919050565b610477610a75565b600034146104ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b190612188565b60405180910390fd5b6000806104cd8a8a8a8a8a8a8a8a610b05565b915091506104dd818b3085610f16565b50505050505050505050565b6104f282610450565b610503816104fe610f2e565b610f36565b61050d8383610fd3565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61053e610f2e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146105ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a29061221a565b60405180910390fd5b6105b582826110b3565b5050565b600160189054906101000a900461ffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b6106716000801b336105f3565b6106b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a790612286565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6107016000801b336105f3565b610740576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073790612286565b60405180910390fd5b818190508484905014610788576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077f906122f2565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166384db809f876040518263ffffffff1660e01b81526004016107e39190611c21565b602060405180830381865afa158015610800573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108249190612327565b905060008173ffffffffffffffffffffffffffffffffffffffff16630a6d55d8886040518263ffffffff1660e01b81526004016108619190611c21565b602060405180830381865afa15801561087e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a29190612327565b905060005b86869050811015610910576108fd828888848181106108c9576108c8612354565b5b90506020020160208101906108de9190611ea9565b8787858181106108f1576108f0612354565b5b90506020020135611194565b8080610908906123b2565b9150506108a7565b5050505050505050565b6109276000801b336105f3565b610966576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095d90612286565b60405180910390fd5b81600160146101000a81548163ffffffff021916908363ffffffff16021790555080600160186101000a81548161ffff021916908361ffff1602179055505050565b6109b182610450565b6109c2816109bd610f2e565b610f36565b6109cc83836110b3565b505050565b6000806109e48a8a8a8a8a8a8a8a610b05565b915091509850989650505050505050565b600160149054906101000a900463ffffffff1681565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afa90612447565b60405180910390fd5b565b6000806101418484905014610b4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b46906124b3565b60405180910390fd5b610b57611abf565b848460009060e092610b6b939291906124dd565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508160000181905250848460e09061012192610bcb939291906124dd565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081602001819052508484610121908092610c2a939291906124dd565b810190610c379190612544565b81604001818152505060008160000151806020019051810190610c5a91906126f5565b90508060600151421115610ca3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9a9061276e565b60405180910390fd5b8a60ff16816080015160ff16148015610cc557508960ff168160a0015160ff16145b8015610cd45750888160c00151145b610d13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0a906127da565b60405180910390fd5b60008260000151805190602001209050610d54818460200151600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166111aa565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166384db809f8c6040518263ffffffff1660e01b8152600401610daf9190611c21565b602060405180830381865afa158015610dcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df09190612327565b905060008173ffffffffffffffffffffffffffffffffffffffff16630a6d55d88d6040518263ffffffff1660e01b8152600401610e2d9190611c21565b602060405180830381865afa158015610e4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6e9190612327565b90506000670de0b6b3a76400008560200151600160149054906101000a900463ffffffff1663ffffffff168760400151610ea891906127fa565b610eb291906127fa565b610ebc9190612883565b9050612710600160189054906101000a900461ffff1661ffff168760400151610ee591906127fa565b610eef9190612883565b975080881015610efd578097505b8782975097505050505050509850989650505050505050565b6000849050610f278185858561122c565b5050505050565b600033905090565b610f4082826105f3565b610fcf57610f658173ffffffffffffffffffffffffffffffffffffffff1660146112b5565b610f738360001c60206112b5565b604051602001610f849291906129c6565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc69190612a39565b60405180910390fd5b5050565b610fdd82826105f3565b6110af57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611054610f2e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6110bd82826105f3565b1561119057600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611135610f2e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60008390506111a48184846114f1565b50505050565b60006111b68484611577565b90508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611226576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121d90612aa7565b60405180910390fd5b50505050565b6112af846323b872dd60e01b85858560405160240161124d93929190612ac7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061159e565b50505050565b6060600060028360026112c891906127fa565b6112d29190612afe565b67ffffffffffffffff8111156112eb576112ea612587565b5b6040519080825280601f01601f19166020018201604052801561131d5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061135557611354612354565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106113b9576113b8612354565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026113f991906127fa565b6114039190612afe565b90505b60018111156114a3577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061144557611444612354565b5b1a60f81b82828151811061145c5761145b612354565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061149c90612b54565b9050611406565b50600084146114e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114de90612bca565b60405180910390fd5b8091505092915050565b6115728363a9059cbb60e01b8484604051602401611510929190612bea565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061159e565b505050565b600080600061158685856116fb565b915091506115938161177e565b819250505092915050565b6000823b9050600081116115e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115de90612c5f565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff168460405161160f9190612cc6565b6000604051808303816000865af19150503d806000811461164c576040519150601f19603f3d011682016040523d82523d6000602084013e611651565b606091505b509150915081611696576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168d90612d29565b60405180910390fd5b6000815111156116f457808060200190518101906116b49190612d75565b6116f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ea90612dee565b60405180910390fd5b5b5050505050565b60008060418351141561173d5760008060006020860151925060408601519150606086015160001a905061173187828585611953565b94509450505050611777565b60408351141561176e576000806020850151915060408501519050611763868383611a60565b935093505050611777565b60006002915091505b9250929050565b6000600481111561179257611791612e0e565b5b8160048111156117a5576117a4612e0e565b5b14156117b057611950565b600160048111156117c4576117c3612e0e565b5b8160048111156117d7576117d6612e0e565b5b1415611818576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180f90612e89565b60405180910390fd5b6002600481111561182c5761182b612e0e565b5b81600481111561183f5761183e612e0e565b5b1415611880576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187790612ef5565b60405180910390fd5b6003600481111561189457611893612e0e565b5b8160048111156118a7576118a6612e0e565b5b14156118e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118df90612f87565b60405180910390fd5b6004808111156118fb576118fa612e0e565b5b81600481111561190e5761190d612e0e565b5b141561194f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194690613019565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c111561198e576000600391509150611a57565b601b8560ff16141580156119a65750601c8560ff1614155b156119b8576000600491509150611a57565b6000600187878787604051600081526020016040526040516119dd9493929190613048565b6020604051602081039080840390855afa1580156119ff573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611a4e57600060019250925050611a57565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c611aa39190612afe565b9050611ab187828885611953565b935093505050935093915050565b60405180606001604052806060815260200160608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611b2981611af4565b8114611b3457600080fd5b50565b600081359050611b4681611b20565b92915050565b600060208284031215611b6257611b61611aea565b5b6000611b7084828501611b37565b91505092915050565b60008115159050919050565b611b8e81611b79565b82525050565b6000602082019050611ba96000830184611b85565b92915050565b6000819050919050565b611bc281611baf565b8114611bcd57600080fd5b50565b600081359050611bdf81611bb9565b92915050565b600060208284031215611bfb57611bfa611aea565b5b6000611c0984828501611bd0565b91505092915050565b611c1b81611baf565b82525050565b6000602082019050611c366000830184611c12565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c6782611c3c565b9050919050565b611c7781611c5c565b8114611c8257600080fd5b50565b600081359050611c9481611c6e565b92915050565b600060ff82169050919050565b611cb081611c9a565b8114611cbb57600080fd5b50565b600081359050611ccd81611ca7565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611cf857611cf7611cd3565b5b8235905067ffffffffffffffff811115611d1557611d14611cd8565b5b602083019150836001820283011115611d3157611d30611cdd565b5b9250929050565b60008060008060008060008060c0898b031215611d5857611d57611aea565b5b6000611d668b828c01611c85565b9850506020611d778b828c01611cbe565b9750506040611d888b828c01611cbe565b9650506060611d998b828c01611bd0565b955050608089013567ffffffffffffffff811115611dba57611db9611aef565b5b611dc68b828c01611ce2565b945094505060a089013567ffffffffffffffff811115611de957611de8611aef565b5b611df58b828c01611ce2565b92509250509295985092959890939650565b60008060408385031215611e1e57611e1d611aea565b5b6000611e2c85828601611bd0565b9250506020611e3d85828601611c85565b9150509250929050565b611e5081611c5c565b82525050565b6000602082019050611e6b6000830184611e47565b92915050565b600061ffff82169050919050565b611e8881611e71565b82525050565b6000602082019050611ea36000830184611e7f565b92915050565b600060208284031215611ebf57611ebe611aea565b5b6000611ecd84828501611c85565b91505092915050565b60008083601f840112611eec57611eeb611cd3565b5b8235905067ffffffffffffffff811115611f0957611f08611cd8565b5b602083019150836020820283011115611f2557611f24611cdd565b5b9250929050565b60008083601f840112611f4257611f41611cd3565b5b8235905067ffffffffffffffff811115611f5f57611f5e611cd8565b5b602083019150836020820283011115611f7b57611f7a611cdd565b5b9250929050565b600080600080600060608688031215611f9e57611f9d611aea565b5b6000611fac88828901611bd0565b955050602086013567ffffffffffffffff811115611fcd57611fcc611aef565b5b611fd988828901611ed6565b9450945050604086013567ffffffffffffffff811115611ffc57611ffb611aef565b5b61200888828901611f2c565b92509250509295509295909350565b600063ffffffff82169050919050565b61203081612017565b811461203b57600080fd5b50565b60008135905061204d81612027565b92915050565b61205c81611e71565b811461206757600080fd5b50565b60008135905061207981612053565b92915050565b6000806040838503121561209657612095611aea565b5b60006120a48582860161203e565b92505060206120b58582860161206a565b9150509250929050565b6000819050919050565b6120d2816120bf565b82525050565b60006040820190506120ed60008301856120c9565b6120fa6020830184611e47565b9392505050565b61210a81612017565b82525050565b60006020820190506121256000830184612101565b92915050565b600082825260208201905092915050565b7f636f6c6c6563744665653a206d73672e76616c756520213d2030000000000000600082015250565b6000612172601a8361212b565b915061217d8261213c565b602082019050919050565b600060208201905081810360008301526121a181612165565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000612204602f8361212b565b915061220f826121a8565b604082019050919050565b60006020820190508181036000830152612233816121f7565b9050919050565b7f73656e64657220646f65736e277420686176652061646d696e20726f6c650000600082015250565b6000612270601e8361212b565b915061227b8261223a565b602082019050919050565b6000602082019050818103600083015261229f81612263565b9050919050565b7f61646472735b5d2c20616d6f756e74735b5d3a2064696666206c656e67746800600082015250565b60006122dc601f8361212b565b91506122e7826122a6565b602082019050919050565b6000602082019050818103600083015261230b816122cf565b9050919050565b60008151905061232181611c6e565b92915050565b60006020828403121561233d5761233c611aea565b5b600061234b84828501612312565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006123bd826120bf565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156123f0576123ef612383565b5b600182019050919050565b7f73656e646572206d7573742062652062726964676520636f6e74726163740000600082015250565b6000612431601e8361212b565b915061243c826123fb565b602082019050919050565b6000602082019050818103600083015261246081612424565b9050919050565b7f496e636f72726563742066656544617461206c656e6774680000000000000000600082015250565b600061249d60188361212b565b91506124a882612467565b602082019050919050565b600060208201905081810360008301526124cc81612490565b9050919050565b600080fd5b600080fd5b600080858511156124f1576124f06124d3565b5b83861115612502576125016124d8565b5b6001850283019150848603905094509492505050565b612521816120bf565b811461252c57600080fd5b50565b60008135905061253e81612518565b92915050565b60006020828403121561255a57612559611aea565b5b60006125688482850161252f565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6125bf82612576565b810181811067ffffffffffffffff821117156125de576125dd612587565b5b80604052505050565b60006125f1611ae0565b90506125fd82826125b6565b919050565b60008151905061261181612518565b92915050565b60008151905061262681611ca7565b92915050565b60008151905061263b81611bb9565b92915050565b600060e0828403121561265757612656612571565b5b61266160e06125e7565b9050600061267184828501612602565b600083015250602061268584828501612602565b602083015250604061269984828501612602565b60408301525060606126ad84828501612602565b60608301525060806126c184828501612617565b60808301525060a06126d584828501612617565b60a08301525060c06126e98482850161262c565b60c08301525092915050565b600060e0828403121561270b5761270a611aea565b5b600061271984828501612641565b91505092915050565b7f4f62736f6c657465206f7261636c652064617461000000000000000000000000600082015250565b600061275860148361212b565b915061276382612722565b602082019050919050565b600060208201905081810360008301526127878161274b565b9050919050565b7f496e636f7272656374206465706f73697420706172616d730000000000000000600082015250565b60006127c460188361212b565b91506127cf8261278e565b602082019050919050565b600060208201905081810360008301526127f3816127b7565b9050919050565b6000612805826120bf565b9150612810836120bf565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561284957612848612383565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061288e826120bf565b9150612899836120bf565b9250826128a9576128a8612854565b5b828204905092915050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b60006128f56017836128b4565b9150612900826128bf565b601782019050919050565b600081519050919050565b60005b83811015612934578082015181840152602081019050612919565b83811115612943576000848401525b50505050565b60006129548261290b565b61295e81856128b4565b935061296e818560208601612916565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006129b06011836128b4565b91506129bb8261297a565b601182019050919050565b60006129d1826128e8565b91506129dd8285612949565b91506129e8826129a3565b91506129f48284612949565b91508190509392505050565b6000612a0b8261290b565b612a15818561212b565b9350612a25818560208601612916565b612a2e81612576565b840191505092915050565b60006020820190508181036000830152612a538184612a00565b905092915050565b7f496e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b6000612a9160118361212b565b9150612a9c82612a5b565b602082019050919050565b60006020820190508181036000830152612ac081612a84565b9050919050565b6000606082019050612adc6000830186611e47565b612ae96020830185611e47565b612af660408301846120c9565b949350505050565b6000612b09826120bf565b9150612b14836120bf565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612b4957612b48612383565b5b828201905092915050565b6000612b5f826120bf565b91506000821415612b7357612b72612383565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000612bb460208361212b565b9150612bbf82612b7e565b602082019050919050565b60006020820190508181036000830152612be381612ba7565b9050919050565b6000604082019050612bff6000830185611e47565b612c0c60208301846120c9565b9392505050565b7f45524332303a206e6f74206120636f6e74726163740000000000000000000000600082015250565b6000612c4960158361212b565b9150612c5482612c13565b602082019050919050565b60006020820190508181036000830152612c7881612c3c565b9050919050565b600081519050919050565b600081905092915050565b6000612ca082612c7f565b612caa8185612c8a565b9350612cba818560208601612916565b80840191505092915050565b6000612cd28284612c95565b915081905092915050565b7f45524332303a2063616c6c206661696c65640000000000000000000000000000600082015250565b6000612d1360128361212b565b9150612d1e82612cdd565b602082019050919050565b60006020820190508181036000830152612d4281612d06565b9050919050565b612d5281611b79565b8114612d5d57600080fd5b50565b600081519050612d6f81612d49565b92915050565b600060208284031215612d8b57612d8a611aea565b5b6000612d9984828501612d60565b91505092915050565b7f45524332303a206f7065726174696f6e20646964206e6f742073756363656564600082015250565b6000612dd860208361212b565b9150612de382612da2565b602082019050919050565b60006020820190508181036000830152612e0781612dcb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000612e7360188361212b565b9150612e7e82612e3d565b602082019050919050565b60006020820190508181036000830152612ea281612e66565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000612edf601f8361212b565b9150612eea82612ea9565b602082019050919050565b60006020820190508181036000830152612f0e81612ed2565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000612f7160228361212b565b9150612f7c82612f15565b604082019050919050565b60006020820190508181036000830152612fa081612f64565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061300360228361212b565b915061300e82612fa7565b604082019050919050565b6000602082019050818103600083015261303281612ff6565b9050919050565b61304281611c9a565b82525050565b600060808201905061305d6000830187611c12565b61306a6020830186613039565b6130776040830185611c12565b6130846060830184611c12565b9594505050505056fea2646970667358221220958ae337ccca9ef435f1691a318d5883721dc2d23a2433f1fbd8385eac20b19564736f6c634300080b0033",
}

// FeeHandlerABI is the input ABI used to generate the binding from.
// Deprecated: Use FeeHandlerMetaData.ABI instead.
var FeeHandlerABI = FeeHandlerMetaData.ABI

// FeeHandlerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use FeeHandlerMetaData.Bin instead.
var FeeHandlerBin = FeeHandlerMetaData.Bin

// DeployFeeHandler deploys a new Ethereum contract, binding an instance of FeeHandler to it.
func DeployFeeHandler(auth *bind.TransactOpts, backend bind.ContractBackend, bridgeAddress common.Address) (common.Address, *types.Transaction, *FeeHandler, error) {
	parsed, err := FeeHandlerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FeeHandlerBin), backend, bridgeAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FeeHandler{FeeHandlerCaller: FeeHandlerCaller{contract: contract}, FeeHandlerTransactor: FeeHandlerTransactor{contract: contract}, FeeHandlerFilterer: FeeHandlerFilterer{contract: contract}}, nil
}

// FeeHandler is an auto generated Go binding around an Ethereum contract.
type FeeHandler struct {
	FeeHandlerCaller     // Read-only binding to the contract
	FeeHandlerTransactor // Write-only binding to the contract
	FeeHandlerFilterer   // Log filterer for contract events
}

// FeeHandlerCaller is an auto generated read-only Go binding around an Ethereum contract.
type FeeHandlerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeeHandlerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FeeHandlerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeeHandlerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FeeHandlerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeeHandlerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FeeHandlerSession struct {
	Contract     *FeeHandler       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FeeHandlerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FeeHandlerCallerSession struct {
	Contract *FeeHandlerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// FeeHandlerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FeeHandlerTransactorSession struct {
	Contract     *FeeHandlerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// FeeHandlerRaw is an auto generated low-level Go binding around an Ethereum contract.
type FeeHandlerRaw struct {
	Contract *FeeHandler // Generic contract binding to access the raw methods on
}

// FeeHandlerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FeeHandlerCallerRaw struct {
	Contract *FeeHandlerCaller // Generic read-only contract binding to access the raw methods on
}

// FeeHandlerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FeeHandlerTransactorRaw struct {
	Contract *FeeHandlerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFeeHandler creates a new instance of FeeHandler, bound to a specific deployed contract.
func NewFeeHandler(address common.Address, backend bind.ContractBackend) (*FeeHandler, error) {
	contract, err := bindFeeHandler(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FeeHandler{FeeHandlerCaller: FeeHandlerCaller{contract: contract}, FeeHandlerTransactor: FeeHandlerTransactor{contract: contract}, FeeHandlerFilterer: FeeHandlerFilterer{contract: contract}}, nil
}

// NewFeeHandlerCaller creates a new read-only instance of FeeHandler, bound to a specific deployed contract.
func NewFeeHandlerCaller(address common.Address, caller bind.ContractCaller) (*FeeHandlerCaller, error) {
	contract, err := bindFeeHandler(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FeeHandlerCaller{contract: contract}, nil
}

// NewFeeHandlerTransactor creates a new write-only instance of FeeHandler, bound to a specific deployed contract.
func NewFeeHandlerTransactor(address common.Address, transactor bind.ContractTransactor) (*FeeHandlerTransactor, error) {
	contract, err := bindFeeHandler(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FeeHandlerTransactor{contract: contract}, nil
}

// NewFeeHandlerFilterer creates a new log filterer instance of FeeHandler, bound to a specific deployed contract.
func NewFeeHandlerFilterer(address common.Address, filterer bind.ContractFilterer) (*FeeHandlerFilterer, error) {
	contract, err := bindFeeHandler(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FeeHandlerFilterer{contract: contract}, nil
}

// bindFeeHandler binds a generic wrapper to an already deployed contract.
func bindFeeHandler(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(FeeHandlerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FeeHandler *FeeHandlerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FeeHandler.Contract.FeeHandlerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FeeHandler *FeeHandlerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeeHandler.Contract.FeeHandlerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FeeHandler *FeeHandlerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FeeHandler.Contract.FeeHandlerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FeeHandler *FeeHandlerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FeeHandler.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FeeHandler *FeeHandlerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeeHandler.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FeeHandler *FeeHandlerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FeeHandler.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_FeeHandler *FeeHandlerCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_FeeHandler *FeeHandlerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _FeeHandler.Contract.DEFAULTADMINROLE(&_FeeHandler.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_FeeHandler *FeeHandlerCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _FeeHandler.Contract.DEFAULTADMINROLE(&_FeeHandler.CallOpts)
}

// BridgeAddress is a free data retrieval call binding the contract method 0x318c136e.
//
// Solidity: function _bridgeAddress() view returns(address)
func (_FeeHandler *FeeHandlerCaller) BridgeAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "_bridgeAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BridgeAddress is a free data retrieval call binding the contract method 0x318c136e.
//
// Solidity: function _bridgeAddress() view returns(address)
func (_FeeHandler *FeeHandlerSession) BridgeAddress() (common.Address, error) {
	return _FeeHandler.Contract.BridgeAddress(&_FeeHandler.CallOpts)
}

// BridgeAddress is a free data retrieval call binding the contract method 0x318c136e.
//
// Solidity: function _bridgeAddress() view returns(address)
func (_FeeHandler *FeeHandlerCallerSession) BridgeAddress() (common.Address, error) {
	return _FeeHandler.Contract.BridgeAddress(&_FeeHandler.CallOpts)
}

// FeePercent is a free data retrieval call binding the contract method 0x69222948.
//
// Solidity: function _feePercent() view returns(uint16)
func (_FeeHandler *FeeHandlerCaller) FeePercent(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "_feePercent")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// FeePercent is a free data retrieval call binding the contract method 0x69222948.
//
// Solidity: function _feePercent() view returns(uint16)
func (_FeeHandler *FeeHandlerSession) FeePercent() (uint16, error) {
	return _FeeHandler.Contract.FeePercent(&_FeeHandler.CallOpts)
}

// FeePercent is a free data retrieval call binding the contract method 0x69222948.
//
// Solidity: function _feePercent() view returns(uint16)
func (_FeeHandler *FeeHandlerCallerSession) FeePercent() (uint16, error) {
	return _FeeHandler.Contract.FeePercent(&_FeeHandler.CallOpts)
}

// GasUsed is a free data retrieval call binding the contract method 0xfc818cfb.
//
// Solidity: function _gasUsed() view returns(uint32)
func (_FeeHandler *FeeHandlerCaller) GasUsed(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "_gasUsed")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GasUsed is a free data retrieval call binding the contract method 0xfc818cfb.
//
// Solidity: function _gasUsed() view returns(uint32)
func (_FeeHandler *FeeHandlerSession) GasUsed() (uint32, error) {
	return _FeeHandler.Contract.GasUsed(&_FeeHandler.CallOpts)
}

// GasUsed is a free data retrieval call binding the contract method 0xfc818cfb.
//
// Solidity: function _gasUsed() view returns(uint32)
func (_FeeHandler *FeeHandlerCallerSession) GasUsed() (uint32, error) {
	return _FeeHandler.Contract.GasUsed(&_FeeHandler.CallOpts)
}

// OracleAddress is a free data retrieval call binding the contract method 0x6fb7cb57.
//
// Solidity: function _oracleAddress() view returns(address)
func (_FeeHandler *FeeHandlerCaller) OracleAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "_oracleAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OracleAddress is a free data retrieval call binding the contract method 0x6fb7cb57.
//
// Solidity: function _oracleAddress() view returns(address)
func (_FeeHandler *FeeHandlerSession) OracleAddress() (common.Address, error) {
	return _FeeHandler.Contract.OracleAddress(&_FeeHandler.CallOpts)
}

// OracleAddress is a free data retrieval call binding the contract method 0x6fb7cb57.
//
// Solidity: function _oracleAddress() view returns(address)
func (_FeeHandler *FeeHandlerCallerSession) OracleAddress() (common.Address, error) {
	return _FeeHandler.Contract.OracleAddress(&_FeeHandler.CallOpts)
}

// CalculateFee is a free data retrieval call binding the contract method 0xef4f081f.
//
// Solidity: function calculateFee(address sender, uint8 fromDomainID, uint8 destinationDomainID, bytes32 resourceID, bytes depositData, bytes feeData) view returns(uint256 fee, address tokenAddress)
func (_FeeHandler *FeeHandlerCaller) CalculateFee(opts *bind.CallOpts, sender common.Address, fromDomainID uint8, destinationDomainID uint8, resourceID [32]byte, depositData []byte, feeData []byte) (struct {
	Fee          *big.Int
	TokenAddress common.Address
}, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "calculateFee", sender, fromDomainID, destinationDomainID, resourceID, depositData, feeData)

	outstruct := new(struct {
		Fee          *big.Int
		TokenAddress common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fee = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.TokenAddress = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// CalculateFee is a free data retrieval call binding the contract method 0xef4f081f.
//
// Solidity: function calculateFee(address sender, uint8 fromDomainID, uint8 destinationDomainID, bytes32 resourceID, bytes depositData, bytes feeData) view returns(uint256 fee, address tokenAddress)
func (_FeeHandler *FeeHandlerSession) CalculateFee(sender common.Address, fromDomainID uint8, destinationDomainID uint8, resourceID [32]byte, depositData []byte, feeData []byte) (struct {
	Fee          *big.Int
	TokenAddress common.Address
}, error) {
	return _FeeHandler.Contract.CalculateFee(&_FeeHandler.CallOpts, sender, fromDomainID, destinationDomainID, resourceID, depositData, feeData)
}

// CalculateFee is a free data retrieval call binding the contract method 0xef4f081f.
//
// Solidity: function calculateFee(address sender, uint8 fromDomainID, uint8 destinationDomainID, bytes32 resourceID, bytes depositData, bytes feeData) view returns(uint256 fee, address tokenAddress)
func (_FeeHandler *FeeHandlerCallerSession) CalculateFee(sender common.Address, fromDomainID uint8, destinationDomainID uint8, resourceID [32]byte, depositData []byte, feeData []byte) (struct {
	Fee          *big.Int
	TokenAddress common.Address
}, error) {
	return _FeeHandler.Contract.CalculateFee(&_FeeHandler.CallOpts, sender, fromDomainID, destinationDomainID, resourceID, depositData, feeData)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_FeeHandler *FeeHandlerCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_FeeHandler *FeeHandlerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _FeeHandler.Contract.GetRoleAdmin(&_FeeHandler.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_FeeHandler *FeeHandlerCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _FeeHandler.Contract.GetRoleAdmin(&_FeeHandler.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_FeeHandler *FeeHandlerCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_FeeHandler *FeeHandlerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _FeeHandler.Contract.HasRole(&_FeeHandler.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_FeeHandler *FeeHandlerCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _FeeHandler.Contract.HasRole(&_FeeHandler.CallOpts, role, account)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FeeHandler *FeeHandlerCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FeeHandler *FeeHandlerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _FeeHandler.Contract.SupportsInterface(&_FeeHandler.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FeeHandler *FeeHandlerCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _FeeHandler.Contract.SupportsInterface(&_FeeHandler.CallOpts, interfaceId)
}

// CollectFee is a paid mutator transaction binding the contract method 0x25307065.
//
// Solidity: function collectFee(address sender, uint8 fromDomainID, uint8 destinationDomainID, bytes32 resourceID, bytes depositData, bytes feeData) payable returns()
func (_FeeHandler *FeeHandlerTransactor) CollectFee(opts *bind.TransactOpts, sender common.Address, fromDomainID uint8, destinationDomainID uint8, resourceID [32]byte, depositData []byte, feeData []byte) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "collectFee", sender, fromDomainID, destinationDomainID, resourceID, depositData, feeData)
}

// CollectFee is a paid mutator transaction binding the contract method 0x25307065.
//
// Solidity: function collectFee(address sender, uint8 fromDomainID, uint8 destinationDomainID, bytes32 resourceID, bytes depositData, bytes feeData) payable returns()
func (_FeeHandler *FeeHandlerSession) CollectFee(sender common.Address, fromDomainID uint8, destinationDomainID uint8, resourceID [32]byte, depositData []byte, feeData []byte) (*types.Transaction, error) {
	return _FeeHandler.Contract.CollectFee(&_FeeHandler.TransactOpts, sender, fromDomainID, destinationDomainID, resourceID, depositData, feeData)
}

// CollectFee is a paid mutator transaction binding the contract method 0x25307065.
//
// Solidity: function collectFee(address sender, uint8 fromDomainID, uint8 destinationDomainID, bytes32 resourceID, bytes depositData, bytes feeData) payable returns()
func (_FeeHandler *FeeHandlerTransactorSession) CollectFee(sender common.Address, fromDomainID uint8, destinationDomainID uint8, resourceID [32]byte, depositData []byte, feeData []byte) (*types.Transaction, error) {
	return _FeeHandler.Contract.CollectFee(&_FeeHandler.TransactOpts, sender, fromDomainID, destinationDomainID, resourceID, depositData, feeData)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_FeeHandler *FeeHandlerTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_FeeHandler *FeeHandlerSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.GrantRole(&_FeeHandler.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_FeeHandler *FeeHandlerTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.GrantRole(&_FeeHandler.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_FeeHandler *FeeHandlerTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_FeeHandler *FeeHandlerSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.RenounceRole(&_FeeHandler.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_FeeHandler *FeeHandlerTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.RenounceRole(&_FeeHandler.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_FeeHandler *FeeHandlerTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_FeeHandler *FeeHandlerSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.RevokeRole(&_FeeHandler.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_FeeHandler *FeeHandlerTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.RevokeRole(&_FeeHandler.TransactOpts, role, account)
}

// SetFeeOracle is a paid mutator transaction binding the contract method 0xa8a98962.
//
// Solidity: function setFeeOracle(address oracleAddress) returns()
func (_FeeHandler *FeeHandlerTransactor) SetFeeOracle(opts *bind.TransactOpts, oracleAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "setFeeOracle", oracleAddress)
}

// SetFeeOracle is a paid mutator transaction binding the contract method 0xa8a98962.
//
// Solidity: function setFeeOracle(address oracleAddress) returns()
func (_FeeHandler *FeeHandlerSession) SetFeeOracle(oracleAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.SetFeeOracle(&_FeeHandler.TransactOpts, oracleAddress)
}

// SetFeeOracle is a paid mutator transaction binding the contract method 0xa8a98962.
//
// Solidity: function setFeeOracle(address oracleAddress) returns()
func (_FeeHandler *FeeHandlerTransactorSession) SetFeeOracle(oracleAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.SetFeeOracle(&_FeeHandler.TransactOpts, oracleAddress)
}

// SetFeeProperties is a paid mutator transaction binding the contract method 0xc297983f.
//
// Solidity: function setFeeProperties(uint32 gasUsed, uint16 feePercent) returns()
func (_FeeHandler *FeeHandlerTransactor) SetFeeProperties(opts *bind.TransactOpts, gasUsed uint32, feePercent uint16) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "setFeeProperties", gasUsed, feePercent)
}

// SetFeeProperties is a paid mutator transaction binding the contract method 0xc297983f.
//
// Solidity: function setFeeProperties(uint32 gasUsed, uint16 feePercent) returns()
func (_FeeHandler *FeeHandlerSession) SetFeeProperties(gasUsed uint32, feePercent uint16) (*types.Transaction, error) {
	return _FeeHandler.Contract.SetFeeProperties(&_FeeHandler.TransactOpts, gasUsed, feePercent)
}

// SetFeeProperties is a paid mutator transaction binding the contract method 0xc297983f.
//
// Solidity: function setFeeProperties(uint32 gasUsed, uint16 feePercent) returns()
func (_FeeHandler *FeeHandlerTransactorSession) SetFeeProperties(gasUsed uint32, feePercent uint16) (*types.Transaction, error) {
	return _FeeHandler.Contract.SetFeeProperties(&_FeeHandler.TransactOpts, gasUsed, feePercent)
}

// TransferFee is a paid mutator transaction binding the contract method 0xbff42755.
//
// Solidity: function transferFee(bytes32 resourceID, address[] addrs, uint256[] amounts) returns()
func (_FeeHandler *FeeHandlerTransactor) TransferFee(opts *bind.TransactOpts, resourceID [32]byte, addrs []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "transferFee", resourceID, addrs, amounts)
}

// TransferFee is a paid mutator transaction binding the contract method 0xbff42755.
//
// Solidity: function transferFee(bytes32 resourceID, address[] addrs, uint256[] amounts) returns()
func (_FeeHandler *FeeHandlerSession) TransferFee(resourceID [32]byte, addrs []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _FeeHandler.Contract.TransferFee(&_FeeHandler.TransactOpts, resourceID, addrs, amounts)
}

// TransferFee is a paid mutator transaction binding the contract method 0xbff42755.
//
// Solidity: function transferFee(bytes32 resourceID, address[] addrs, uint256[] amounts) returns()
func (_FeeHandler *FeeHandlerTransactorSession) TransferFee(resourceID [32]byte, addrs []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _FeeHandler.Contract.TransferFee(&_FeeHandler.TransactOpts, resourceID, addrs, amounts)
}

// FeeHandlerRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the FeeHandler contract.
type FeeHandlerRoleAdminChangedIterator struct {
	Event *FeeHandlerRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeeHandlerRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeeHandlerRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeeHandlerRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeeHandlerRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeeHandlerRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeeHandlerRoleAdminChanged represents a RoleAdminChanged event raised by the FeeHandler contract.
type FeeHandlerRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_FeeHandler *FeeHandlerFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*FeeHandlerRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _FeeHandler.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &FeeHandlerRoleAdminChangedIterator{contract: _FeeHandler.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_FeeHandler *FeeHandlerFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *FeeHandlerRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _FeeHandler.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeeHandlerRoleAdminChanged)
				if err := _FeeHandler.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_FeeHandler *FeeHandlerFilterer) ParseRoleAdminChanged(log types.Log) (*FeeHandlerRoleAdminChanged, error) {
	event := new(FeeHandlerRoleAdminChanged)
	if err := _FeeHandler.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeeHandlerRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the FeeHandler contract.
type FeeHandlerRoleGrantedIterator struct {
	Event *FeeHandlerRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeeHandlerRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeeHandlerRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeeHandlerRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeeHandlerRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeeHandlerRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeeHandlerRoleGranted represents a RoleGranted event raised by the FeeHandler contract.
type FeeHandlerRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_FeeHandler *FeeHandlerFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*FeeHandlerRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _FeeHandler.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &FeeHandlerRoleGrantedIterator{contract: _FeeHandler.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_FeeHandler *FeeHandlerFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *FeeHandlerRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _FeeHandler.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeeHandlerRoleGranted)
				if err := _FeeHandler.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_FeeHandler *FeeHandlerFilterer) ParseRoleGranted(log types.Log) (*FeeHandlerRoleGranted, error) {
	event := new(FeeHandlerRoleGranted)
	if err := _FeeHandler.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeeHandlerRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the FeeHandler contract.
type FeeHandlerRoleRevokedIterator struct {
	Event *FeeHandlerRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeeHandlerRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeeHandlerRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeeHandlerRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeeHandlerRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeeHandlerRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeeHandlerRoleRevoked represents a RoleRevoked event raised by the FeeHandler contract.
type FeeHandlerRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_FeeHandler *FeeHandlerFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*FeeHandlerRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _FeeHandler.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &FeeHandlerRoleRevokedIterator{contract: _FeeHandler.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_FeeHandler *FeeHandlerFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *FeeHandlerRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _FeeHandler.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeeHandlerRoleRevoked)
				if err := _FeeHandler.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_FeeHandler *FeeHandlerFilterer) ParseRoleRevoked(log types.Log) (*FeeHandlerRoleRevoked, error) {
	event := new(FeeHandlerRoleRevoked)
	if err := _FeeHandler.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
