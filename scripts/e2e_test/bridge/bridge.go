// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bridge

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BridgeProposal is an auto generated low-level Go binding around an user-defined struct.
type BridgeProposal struct {
	OriginDomainID uint8
	DepositNonce   uint64
	ResourceID     [32]byte
	Data           []byte
}

// BridgeMetaData contains all meta data concerning the Bridge contract.
var BridgeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"domainID\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"accessControl\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccessControl\",\"type\":\"address\"}],\"name\":\"AccessControlChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"destinationDomainID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"handlerResponse\",\"type\":\"bytes\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EndKeygen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lowLevelData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"originDomainID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"}],\"name\":\"FailedHandlerExecution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeHandler\",\"type\":\"address\"}],\"name\":\"FeeHandlerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"}],\"name\":\"KeyRefresh\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"originDomainID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalExecution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"txHash\",\"type\":\"string\"}],\"name\":\"Retry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StartKeygen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_MPCAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_accessControl\",\"outputs\":[{\"internalType\":\"contractIAccessControlSegregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"_depositCounts\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_domainID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeHandler\",\"outputs\":[{\"internalType\":\"contractIFeeHandler\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_resourceIDToHandlerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAccessControl\",\"type\":\"address\"}],\"name\":\"adminChangeAccessControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeHandler\",\"type\":\"address\"}],\"name\":\"adminChangeFeeHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminPauseTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"adminSetBurnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"domainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"name\":\"adminSetDepositNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"name\":\"adminSetForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"depositFunctionSig\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"depositFunctionDepositerOffset\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"executeFunctionSig\",\"type\":\"bytes4\"}],\"name\":\"adminSetGenericResource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"adminSetResource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminUnpauseTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"adminWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"destinationDomainID\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"feeData\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"MPCAddress\",\"type\":\"address\"}],\"name\":\"endKeygen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"originDomainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"originDomainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structBridge.Proposal[]\",\"name\":\"proposals\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"executeProposals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"domainID\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"}],\"name\":\"isProposalExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"}],\"name\":\"refreshKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"txHash\",\"type\":\"string\"}],\"name\":\"retry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startKeygen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usedNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a06040523480156200001157600080fd5b5060405162004954380380620049548339818101604052810190620000379190620002a6565b60008060006101000a81548160ff0219169083151502179055508160ff1660808160ff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000c0620000b4620000c860201b60201c565b6200014560201b60201c565b50506200039e565b60008033905060146000369050101580156200012d5750600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b156200013e57601436033560601c90505b8091505090565b62000155620001ab60201b60201c565b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25881604051620001a09190620002fe565b60405180910390a150565b60008054906101000a900460ff1615620001fc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001f3906200037c565b60405180910390fd5b565b600080fd5b600060ff82169050919050565b6200021b8162000203565b81146200022757600080fd5b50565b6000815190506200023b8162000210565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200026e8262000241565b9050919050565b620002808162000261565b81146200028c57600080fd5b50565b600081519050620002a08162000275565b92915050565b60008060408385031215620002c057620002bf620001fe565b5b6000620002d0858286016200022a565b9250506020620002e3858286016200028f565b9150509250929050565b620002f88162000261565b82525050565b6000602082019050620003156000830184620002ed565b92915050565b600082825260208201905092915050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000620003646010836200031b565b915062000371826200032c565b602082019050919050565b60006020820190508181036000830152620003978162000355565b9050919050565b60805161457e620003d6600039600081816106cf015281816109ea015281816111f40152818161134801526118a0015261457e6000f3fe60806040526004361061019c5760003560e01c80638b63aebf116100ec578063d15ef64e1161008a578063edc20c3c11610064578063edc20c3c14610577578063f8c39e44146105a0578063fe4648f4146105dd578063ffaac0eb146106085761019c565b8063d15ef64e146104fc578063d2e5fae914610525578063d82367441461054e5761019c565b80639d33b6d4116100c65780639d33b6d4146104565780639dd694f41461047f578063bd2a1820146104aa578063cb10f215146104d35761019c565b80638b63aebf146103c75780638c0c2631146103f05780639ae0bf45146104195761019c565b80634b0b919d116101595780636ba6db6b116101335780636ba6db6b1461034057806373c45c981461035757806380ae1c281461037357806384db809f1461038a5761019c565b80634b0b919d146102af5780635a1ad87c146102ec5780635c975abb146103155761019c565b80630395974c146101a1578063059972d2146101ca57806308a64104146101f55780631f5c64c114610232578063366b48851461025b57806344e8e43014610284575b600080fd5b3480156101ad57600080fd5b506101c860048036038101906101c39190612701565b61061f565b005b3480156101d657600080fd5b506101df61094a565b6040516101ec91906127fe565b60405180910390f35b34801561020157600080fd5b5061021c6004803603810190610217919061284f565b610970565b604051610229919061289e565b60405180910390f35b34801561023e57600080fd5b5061025960048036038101906102549190612b79565b610995565b005b34801561026757600080fd5b50610282600480360381019061027d9190612c92565b610f51565b005b34801561029057600080fd5b50610299610f8b565b6040516102a69190612d3a565b60405180910390f35b3480156102bb57600080fd5b506102d660048036038101906102d19190612d55565b610fb1565b6040516102e39190612d91565b60405180910390f35b3480156102f857600080fd5b50610313600480360381019061030e9190612e30565b610fd8565b005b34801561032157600080fd5b5061032a6110e0565b6040516103379190612ed8565b60405180910390f35b34801561034c57600080fd5b506103556110f6565b005b610371600480360381019061036c9190612ef3565b6111ea565b005b34801561037f57600080fd5b506103886115c2565b005b34801561039657600080fd5b506103b160048036038101906103ac9190612f9a565b611609565b6040516103be91906127fe565b60405180910390f35b3480156103d357600080fd5b506103ee60048036038101906103e99190612fc7565b61163c565b005b3480156103fc57600080fd5b5061041760048036038101906104129190612ff4565b6116ec565b005b34801561042557600080fd5b50610440600480360381019061043b919061284f565b611796565b60405161044d9190612ed8565b60405180910390f35b34801561046257600080fd5b5061047d60048036038101906104789190612fc7565b6117ee565b005b34801561048b57600080fd5b5061049461189e565b6040516104a19190613043565b60405180910390f35b3480156104b657600080fd5b506104d160048036038101906104cc919061305e565b6118c2565b005b3480156104df57600080fd5b506104fa60048036038101906104f591906130ba565b61196c565b005b34801561050857600080fd5b50610523600480360381019061051e9190613139565b611a6b565b005b34801561053157600080fd5b5061054c60048036038101906105479190612fc7565b611afb565b005b34801561055a57600080fd5b5061057560048036038101906105709190612c92565b611cb1565b005b34801561058357600080fd5b5061059e60048036038101906105999190613179565b611d20565b005b3480156105ac57600080fd5b506105c760048036038101906105c29190612fc7565b611e1c565b6040516105d49190612ed8565b60405180910390f35b3480156105e957600080fd5b506105f2611e3c565b6040516105ff91906131da565b60405180910390f35b34801561061457600080fd5b5061061d611e62565b005b610627611f3b565b6001151561063f888867ffffffffffffffff16611796565b15151415610682576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990613278565b60405180910390fd5b600061072b83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050897f00000000000000000000000000000000000000000000000000000000000000008a8a8a8a604051602001610707969594939291906132e5565b60405160208183030381529060405280519060200120611f8b90919063ffffffff16565b9050600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146107bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b49061338d565b60405180910390fd5b60006004600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600081888860405160200161080c93929190613425565b60405160208183030381529060405280519060200120905060008290506101008a610837919061347e565b67ffffffffffffffff166001901b600660008d60ff1660ff16815260200190815260200160002060006101008d61086e91906134de565b67ffffffffffffffff168152602001908152602001600020600082825417925050819055508073ffffffffffffffffffffffffffffffffffffffff1663e248cff2888b8b6040518463ffffffff1660e01b81526004016108d09392919061350f565b600060405180830381600087803b1580156108ea57600080fd5b505af11580156108fe573d6000803e3d6000fd5b505050507f6018c584b8d99bafeda249b2429f5907d830e792222070c1b3a94aa76ee716778b8b8460405161093593929190613541565b60405180910390a15050505050505050505050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6006602052816000526040600020602052806000526040600020600091509150505481565b61099d611f3b565b60008251116109e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d8906135ea565b60405180910390fd5b6000610a3e82847f0000000000000000000000000000000000000000000000000000000000000000604051602001610a1a9291906137e4565b60405160208183030381529060405280519060200120611f8b90919063ffffffff16565b9050600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ad0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac79061338d565b60405180910390fd5b60005b8351811015610f4b57610b2c848281518110610af257610af1613814565b5b602002602001015160000151858381518110610b1157610b10613814565b5b60200260200101516020015167ffffffffffffffff16611796565b15610b3657610f38565b600060046000868481518110610b4f57610b4e613814565b5b602002602001015160400151815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600081868481518110610ba257610ba1613814565b5b602002602001015160600151604051602001610bbf929190613874565b6040516020818303038152906040528051906020012090506000829050610100878581518110610bf257610bf1613814565b5b602002602001015160200151610c08919061347e565b67ffffffffffffffff166001901b60066000898781518110610c2d57610c2c613814565b5b60200260200101516000015160ff1660ff16815260200190815260200160002060006101008a8881518110610c6557610c64613814565b5b602002602001015160200151610c7b91906134de565b67ffffffffffffffff168152602001908152602001600020600082825417925050819055508073ffffffffffffffffffffffffffffffffffffffff1663e248cff2888681518110610ccf57610cce613814565b5b602002602001015160400151898781518110610cee57610ced613814565b5b6020026020010151606001516040518363ffffffff1660e01b8152600401610d179291906138d5565b600060405180830381600087803b158015610d3157600080fd5b505af1925050508015610d42575060015b610ebd573d8060008114610d72576040519150601f19603f3d011682016040523d82523d6000602084013e610d77565b606091505b507f19f774a63ee465292252a9981ae52051acc13da671c698ac4b5bf25b38c5b6fc81898781518110610dad57610dac613814565b5b6020026020010151600001518a8881518110610dcc57610dcb613814565b5b602002602001015160200151604051610de793929190613905565b60405180910390a1610100888681518110610e0557610e04613814565b5b602002602001015160200151610e1b919061347e565b67ffffffffffffffff166001901b19600660008a8881518110610e4157610e40613814565b5b60200260200101516000015160ff1660ff16815260200190815260200160002060006101008b8981518110610e7957610e78613814565b5b602002602001015160200151610e8f91906134de565b67ffffffffffffffff1681526020019081526020016000206000828254169250508190555050505050610f38565b7f6018c584b8d99bafeda249b2429f5907d830e792222070c1b3a94aa76ee71677878581518110610ef157610ef0613814565b5b602002602001015160000151888681518110610f1057610f0f613814565b5b60200260200101516020015184604051610f2c93929190613541565b60405180910390a15050505b8080610f4390613943565b915050610ad3565b50505050565b7f9069464c059b9a90135a3fdf2c47855263346b912894ad7562d989532c3fad4c81604051610f8091906139d0565b60405180910390a150565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915054906101000a900467ffffffffffffffff1681565b61100d6000357fffffffff0000000000000000000000000000000000000000000000000000000016611008611fb2565b61202d565b856004600087815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008690508073ffffffffffffffffffffffffffffffffffffffff1663de319d9987878787876040518663ffffffff1660e01b81526004016110a5959493929190613a01565b600060405180830381600087803b1580156110bf57600080fd5b505af11580156110d3573d6000803e3d6000fd5b5050505050505050505050565b60008060009054906101000a900460ff16905090565b61112b6000357fffffffff0000000000000000000000000000000000000000000000000000000016611126611fb2565b61202d565b600073ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146111bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b390613aa0565b60405180910390fd5b7f24e723a5c27b62883404028b8dee9965934de6a46828cda2ff63bf9a5e65ce4360405160405180910390a1565b6111f2611f3b565b7f000000000000000000000000000000000000000000000000000000000000000060ff168660ff16141561125b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125290613b0c565b60405180910390fd5b6000611265611fb2565b9050600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156113065760003414611301576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f890613b78565b60405180910390fd5b6113c3565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632530706534837f00000000000000000000000000000000000000000000000000000000000000008b8b8b8b8b8b6040518a63ffffffff1660e01b8152600401611390989796959493929190613b98565b6000604051808303818588803b1580156113a957600080fd5b505af11580156113bd573d6000803e3d6000fd5b50505050505b60006004600088815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561146b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146290613c57565b60405180910390fd5b6000600360008a60ff1660ff168152602001908152602001600020600081819054906101000a900467ffffffffffffffff166114a690613c77565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790559050600082905060008173ffffffffffffffffffffffffffffffffffffffff1663b07e54bb8b878c8c6040518563ffffffff1660e01b81526004016115139493929190613ca8565b6000604051808303816000875af1158015611532573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061155b9190613d58565b90508473ffffffffffffffffffffffffffffffffffffffff167f17bc3181e17a9620a479c24e6c606e474ba84fc036877b768926872e8cd0e11f8c8c868d8d876040516115ad96959493929190613da1565b60405180910390a25050505050505050505050565b6115f76000357fffffffff00000000000000000000000000000000000000000000000000000000166115f2611fb2565b61202d565b611607611602611fb2565b61210e565b565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6116716000357fffffffff000000000000000000000000000000000000000000000000000000001661166c611fb2565b61202d565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f729170bd142e4965055b26a285faeedf03baf2b915bfc5a7c75d24b45815ff2c816040516116e191906127fe565b60405180910390a150565b6117216000357fffffffff000000000000000000000000000000000000000000000000000000001661171c611fb2565b61202d565b60008290508073ffffffffffffffffffffffffffffffffffffffff166307b7ed99836040518263ffffffff1660e01b815260040161175f91906127fe565b600060405180830381600087803b15801561177957600080fd5b505af115801561178d573d6000803e3d6000fd5b50505050505050565b600080610100836117a79190613e04565b6001901b600660008660ff1660ff1681526020019081526020016000206000610100866117d49190613e35565b815260200190815260200160002054161415905092915050565b6118236000357fffffffff000000000000000000000000000000000000000000000000000000001661181e611fb2565b61202d565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f497acaa34ac19c2a2a579ad43eca493b4fea820459e254e9383e7dda216b0f048160405161189391906127fe565b60405180910390a150565b7f000000000000000000000000000000000000000000000000000000000000000081565b6118f76000357fffffffff00000000000000000000000000000000000000000000000000000000166118f2611fb2565b61202d565b60008290508073ffffffffffffffffffffffffffffffffffffffff16630968f264836040518263ffffffff1660e01b81526004016119359190613e66565b600060405180830381600087803b15801561194f57600080fd5b505af1158015611963573d6000803e3d6000fd5b50505050505050565b6119a16000357fffffffff000000000000000000000000000000000000000000000000000000001661199c611fb2565b61202d565b826004600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008390508073ffffffffffffffffffffffffffffffffffffffff1663b8fa373684846040518363ffffffff1660e01b8152600401611a33929190613e88565b600060405180830381600087803b158015611a4d57600080fd5b505af1158015611a61573d6000803e3d6000fd5b5050505050505050565b611aa06000357fffffffff0000000000000000000000000000000000000000000000000000000016611a9b611fb2565b61202d565b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b611b306000357fffffffff0000000000000000000000000000000000000000000000000000000016611b2b611fb2565b61202d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611ba0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b9790613f23565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611c31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2890613f8f565b60405180910390fd5b80600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611c82611c7d611fb2565b61216a565b7f4187686ceef7b541a1f224d48d4cded8f2c535e0e58ac0f0514071b1de3dad5760405160405180910390a150565b611ce66000357fffffffff0000000000000000000000000000000000000000000000000000000016611ce1611fb2565b61202d565b7fe78d813a9260522f81d6c761e311727b2e19008daadd2b9e174be86bc4f06a4b81604051611d1591906139d0565b60405180910390a150565b611d556000357fffffffff0000000000000000000000000000000000000000000000000000000016611d50611fb2565b61202d565b600360008360ff1660ff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff168167ffffffffffffffff1611611dd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dcf90614021565b60405180910390fd5b80600360008460ff1660ff16815260200190815260200160002060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050565b60056020528060005260406000206000915054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611e976000357fffffffff0000000000000000000000000000000000000000000000000000000016611e92611fb2565b61202d565b600073ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611f29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f209061408d565b60405180910390fd5b611f39611f34611fb2565b61216a565b565b60008054906101000a900460ff1615611f89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f80906140f9565b60405180910390fd5b565b6000806000611f9a85856121c6565b91509150611fa781612249565b819250505092915050565b60008033905060146000369050101580156120165750600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1561202657601436033560601c90505b8091505090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166371c9521c83836040518363ffffffff1660e01b815260040161208a929190614119565b602060405180830381865afa1580156120a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120cb9190614157565b61210a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612101906141f6565b60405180910390fd5b5050565b612116611f3b565b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2588160405161215f91906127fe565b60405180910390a150565b61217261241e565b60008060006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa816040516121bb91906127fe565b60405180910390a150565b6000806041835114156122085760008060006020860151925060408601519150606086015160001a90506121fc8782858561246d565b94509450505050612242565b60408351141561223957600080602085015191506040850151905061222e86838361257a565b935093505050612242565b60006002915091505b9250929050565b6000600481111561225d5761225c614216565b5b8160048111156122705761226f614216565b5b141561227b5761241b565b6001600481111561228f5761228e614216565b5b8160048111156122a2576122a1614216565b5b14156122e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122da90614291565b60405180910390fd5b600260048111156122f7576122f6614216565b5b81600481111561230a57612309614216565b5b141561234b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612342906142fd565b60405180910390fd5b6003600481111561235f5761235e614216565b5b81600481111561237257612371614216565b5b14156123b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123aa9061438f565b60405180910390fd5b6004808111156123c6576123c5614216565b5b8160048111156123d9576123d8614216565b5b141561241a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161241190614421565b60405180910390fd5b5b50565b60008054906101000a900460ff1661246b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124629061448d565b60405180910390fd5b565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156124a8576000600391509150612571565b601b8560ff16141580156124c05750601c8560ff1614155b156124d2576000600491509150612571565b6000600187878787604051600081526020016040526040516124f794939291906144ad565b6020604051602081039080840390855afa158015612519573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561256857600060019250925050612571565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c6125bd91906144f2565b90506125cb8782888561246d565b935093505050935093915050565b6000604051905090565b600080fd5b600080fd5b600060ff82169050919050565b612603816125ed565b811461260e57600080fd5b50565b600081359050612620816125fa565b92915050565b600067ffffffffffffffff82169050919050565b61264381612626565b811461264e57600080fd5b50565b6000813590506126608161263a565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261268b5761268a612666565b5b8235905067ffffffffffffffff8111156126a8576126a761266b565b5b6020830191508360018202830111156126c4576126c3612670565b5b9250929050565b6000819050919050565b6126de816126cb565b81146126e957600080fd5b50565b6000813590506126fb816126d5565b92915050565b600080600080600080600060a0888a0312156127205761271f6125e3565b5b600061272e8a828b01612611565b975050602061273f8a828b01612651565b965050604088013567ffffffffffffffff8111156127605761275f6125e8565b5b61276c8a828b01612675565b9550955050606061277f8a828b016126ec565b935050608088013567ffffffffffffffff8111156127a05761279f6125e8565b5b6127ac8a828b01612675565b925092505092959891949750929550565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006127e8826127bd565b9050919050565b6127f8816127dd565b82525050565b600060208201905061281360008301846127ef565b92915050565b6000819050919050565b61282c81612819565b811461283757600080fd5b50565b60008135905061284981612823565b92915050565b60008060408385031215612866576128656125e3565b5b600061287485828601612611565b92505060206128858582860161283a565b9150509250929050565b61289881612819565b82525050565b60006020820190506128b3600083018461288f565b92915050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612902826128b9565b810181811067ffffffffffffffff82111715612921576129206128ca565b5b80604052505050565b60006129346125d9565b905061294082826128f9565b919050565b600067ffffffffffffffff8211156129605761295f6128ca565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff82111561299b5761299a6128ca565b5b6129a4826128b9565b9050602081019050919050565b82818337600083830152505050565b60006129d36129ce84612980565b61292a565b9050828152602081018484840111156129ef576129ee61297b565b5b6129fa8482856129b1565b509392505050565b600082601f830112612a1757612a16612666565b5b8135612a278482602086016129c0565b91505092915050565b600060808284031215612a4657612a45612971565b5b612a50608061292a565b90506000612a6084828501612611565b6000830152506020612a7484828501612651565b6020830152506040612a88848285016126ec565b604083015250606082013567ffffffffffffffff811115612aac57612aab612976565b5b612ab884828501612a02565b60608301525092915050565b6000612ad7612ad284612945565b61292a565b90508083825260208201905060208402830185811115612afa57612af9612670565b5b835b81811015612b4157803567ffffffffffffffff811115612b1f57612b1e612666565b5b808601612b2c8982612a30565b85526020850194505050602081019050612afc565b5050509392505050565b600082601f830112612b6057612b5f612666565b5b8135612b70848260208601612ac4565b91505092915050565b60008060408385031215612b9057612b8f6125e3565b5b600083013567ffffffffffffffff811115612bae57612bad6125e8565b5b612bba85828601612b4b565b925050602083013567ffffffffffffffff811115612bdb57612bda6125e8565b5b612be785828601612a02565b9150509250929050565b600067ffffffffffffffff821115612c0c57612c0b6128ca565b5b612c15826128b9565b9050602081019050919050565b6000612c35612c3084612bf1565b61292a565b905082815260208101848484011115612c5157612c5061297b565b5b612c5c8482856129b1565b509392505050565b600082601f830112612c7957612c78612666565b5b8135612c89848260208601612c22565b91505092915050565b600060208284031215612ca857612ca76125e3565b5b600082013567ffffffffffffffff811115612cc657612cc56125e8565b5b612cd284828501612c64565b91505092915050565b6000819050919050565b6000612d00612cfb612cf6846127bd565b612cdb565b6127bd565b9050919050565b6000612d1282612ce5565b9050919050565b6000612d2482612d07565b9050919050565b612d3481612d19565b82525050565b6000602082019050612d4f6000830184612d2b565b92915050565b600060208284031215612d6b57612d6a6125e3565b5b6000612d7984828501612611565b91505092915050565b612d8b81612626565b82525050565b6000602082019050612da66000830184612d82565b92915050565b612db5816127dd565b8114612dc057600080fd5b50565b600081359050612dd281612dac565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612e0d81612dd8565b8114612e1857600080fd5b50565b600081359050612e2a81612e04565b92915050565b60008060008060008060c08789031215612e4d57612e4c6125e3565b5b6000612e5b89828a01612dc3565b9650506020612e6c89828a016126ec565b9550506040612e7d89828a01612dc3565b9450506060612e8e89828a01612e1b565b9350506080612e9f89828a0161283a565b92505060a0612eb089828a01612e1b565b9150509295509295509295565b60008115159050919050565b612ed281612ebd565b82525050565b6000602082019050612eed6000830184612ec9565b92915050565b60008060008060008060808789031215612f1057612f0f6125e3565b5b6000612f1e89828a01612611565b9650506020612f2f89828a016126ec565b955050604087013567ffffffffffffffff811115612f5057612f4f6125e8565b5b612f5c89828a01612675565b9450945050606087013567ffffffffffffffff811115612f7f57612f7e6125e8565b5b612f8b89828a01612675565b92509250509295509295509295565b600060208284031215612fb057612faf6125e3565b5b6000612fbe848285016126ec565b91505092915050565b600060208284031215612fdd57612fdc6125e3565b5b6000612feb84828501612dc3565b91505092915050565b6000806040838503121561300b5761300a6125e3565b5b600061301985828601612dc3565b925050602061302a85828601612dc3565b9150509250929050565b61303d816125ed565b82525050565b60006020820190506130586000830184613034565b92915050565b60008060408385031215613075576130746125e3565b5b600061308385828601612dc3565b925050602083013567ffffffffffffffff8111156130a4576130a36125e8565b5b6130b085828601612a02565b9150509250929050565b6000806000606084860312156130d3576130d26125e3565b5b60006130e186828701612dc3565b93505060206130f2868287016126ec565b925050604061310386828701612dc3565b9150509250925092565b61311681612ebd565b811461312157600080fd5b50565b6000813590506131338161310d565b92915050565b600080604083850312156131505761314f6125e3565b5b600061315e85828601612dc3565b925050602061316f85828601613124565b9150509250929050565b600080604083850312156131905761318f6125e3565b5b600061319e85828601612611565b92505060206131af85828601612651565b9150509250929050565b60006131c482612d07565b9050919050565b6131d4816131b9565b82525050565b60006020820190506131ef60008301846131cb565b92915050565b600082825260208201905092915050565b7f4465706f73697420776974682070726f7669646564206e6f6e636520616c726560008201527f6164792065786563757465640000000000000000000000000000000000000000602082015250565b6000613262602c836131f5565b915061326d82613206565b604082019050919050565b6000602082019050818103600083015261329181613255565b9050919050565b600082825260208201905092915050565b60006132b58385613298565b93506132c28385846129b1565b6132cb836128b9565b840190509392505050565b6132df816126cb565b82525050565b600060a0820190506132fa6000830189613034565b6133076020830188613034565b6133146040830187612d82565b81810360608301526133278185876132a9565b905061333660808301846132d6565b979650505050505050565b7f496e76616c6964206d657373616765207369676e657200000000000000000000600082015250565b60006133776016836131f5565b915061338282613341565b602082019050919050565b600060208201905081810360008301526133a68161336a565b9050919050565b60008160601b9050919050565b60006133c5826133ad565b9050919050565b60006133d7826133ba565b9050919050565b6133ef6133ea826127dd565b6133cc565b82525050565b600081905092915050565b600061340c83856133f5565b93506134198385846129b1565b82840190509392505050565b600061343182866133de565b601482019150613442828486613400565b9150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061348982612626565b915061349483612626565b9250826134a4576134a361344f565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006134e982612626565b91506134f483612626565b9250826135045761350361344f565b5b828204905092915050565b600060408201905061352460008301866132d6565b81810360208301526135378184866132a9565b9050949350505050565b60006060820190506135566000830186613034565b6135636020830185612d82565b61357060408301846132d6565b949350505050565b7f50726f706f73616c732063616e277420626520616e20656d707479206172726160008201527f7900000000000000000000000000000000000000000000000000000000000000602082015250565b60006135d46021836131f5565b91506135df82613578565b604082019050919050565b60006020820190508181036000830152613603816135c7565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61363f816125ed565b82525050565b61364e81612626565b82525050565b61365d816126cb565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561369d578082015181840152602081019050613682565b838111156136ac576000848401525b50505050565b60006136bd82613663565b6136c7818561366e565b93506136d781856020860161367f565b6136e0816128b9565b840191505092915050565b60006080830160008301516137036000860182613636565b5060208301516137166020860182613645565b5060408301516137296040860182613654565b506060830151848203606086015261374182826136b2565b9150508091505092915050565b600061375a83836136eb565b905092915050565b6000602082019050919050565b600061377a8261360a565b6137848185613615565b93508360208202850161379685613626565b8060005b858110156137d257848403895281516137b3858261374e565b94506137be83613762565b925060208a0199505060018101905061379a565b50829750879550505050505092915050565b600060408201905081810360008301526137fe818561376f565b905061380d6020830184613034565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061384e82613663565b61385881856133f5565b935061386881856020860161367f565b80840191505092915050565b600061388082856133de565b6014820191506138908284613843565b91508190509392505050565b60006138a782613663565b6138b18185613298565b93506138c181856020860161367f565b6138ca816128b9565b840191505092915050565b60006040820190506138ea60008301856132d6565b81810360208301526138fc818461389c565b90509392505050565b6000606082019050818103600083015261391f818661389c565b905061392e6020830185613034565b61393b6040830184612d82565b949350505050565b600061394e82612819565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613981576139806134af565b5b600182019050919050565b600081519050919050565b60006139a28261398c565b6139ac81856131f5565b93506139bc81856020860161367f565b6139c5816128b9565b840191505092915050565b600060208201905081810360008301526139ea8184613997565b905092915050565b6139fb81612dd8565b82525050565b600060a082019050613a1660008301886132d6565b613a2360208301876127ef565b613a3060408301866139f2565b613a3d606083018561288f565b613a4a60808301846139f2565b9695505050505050565b7f4d5043206164647265737320697320616c726561647920736574000000000000600082015250565b6000613a8a601a836131f5565b9150613a9582613a54565b602082019050919050565b60006020820190508181036000830152613ab981613a7d565b9050919050565b7f43616e2774206465706f73697420746f2063757272656e7420646f6d61696e00600082015250565b6000613af6601f836131f5565b9150613b0182613ac0565b602082019050919050565b60006020820190508181036000830152613b2581613ae9565b9050919050565b7f6e6f2046656548616e646c65722c206d73672e76616c756520213d2030000000600082015250565b6000613b62601d836131f5565b9150613b6d82613b2c565b602082019050919050565b60006020820190508181036000830152613b9181613b55565b9050919050565b600060c082019050613bad600083018b6127ef565b613bba602083018a613034565b613bc76040830189613034565b613bd460608301886132d6565b8181036080830152613be78186886132a9565b905081810360a0830152613bfc8184866132a9565b90509998505050505050505050565b7f7265736f757263654944206e6f74206d617070656420746f2068616e646c6572600082015250565b6000613c416020836131f5565b9150613c4c82613c0b565b602082019050919050565b60006020820190508181036000830152613c7081613c34565b9050919050565b6000613c8282612626565b915067ffffffffffffffff821415613c9d57613c9c6134af565b5b600182019050919050565b6000606082019050613cbd60008301876132d6565b613cca60208301866127ef565b8181036040830152613cdd8184866132a9565b905095945050505050565b6000613cfb613cf684612980565b61292a565b905082815260208101848484011115613d1757613d1661297b565b5b613d2284828561367f565b509392505050565b600082601f830112613d3f57613d3e612666565b5b8151613d4f848260208601613ce8565b91505092915050565b600060208284031215613d6e57613d6d6125e3565b5b600082015167ffffffffffffffff811115613d8c57613d8b6125e8565b5b613d9884828501613d2a565b91505092915050565b600060a082019050613db66000830189613034565b613dc360208301886132d6565b613dd06040830187612d82565b8181036060830152613de38185876132a9565b90508181036080830152613df7818461389c565b9050979650505050505050565b6000613e0f82612819565b9150613e1a83612819565b925082613e2a57613e2961344f565b5b828206905092915050565b6000613e4082612819565b9150613e4b83612819565b925082613e5b57613e5a61344f565b5b828204905092915050565b60006020820190508181036000830152613e80818461389c565b905092915050565b6000604082019050613e9d60008301856132d6565b613eaa60208301846127ef565b9392505050565b7f4d504320616464726573732063616e2774206265206e756c6c2d61646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000613f0d6021836131f5565b9150613f1882613eb1565b604082019050919050565b60006020820190508181036000830152613f3c81613f00565b9050919050565b7f4d504320616464726573732063616e2774206265207570646174656400000000600082015250565b6000613f79601c836131f5565b9150613f8482613f43565b602082019050919050565b60006020820190508181036000830152613fa881613f6c565b9050919050565b7f446f6573206e6f7420616c6c6f772064656372656d656e7473206f662074686560008201527f206e6f6e63650000000000000000000000000000000000000000000000000000602082015250565b600061400b6026836131f5565b915061401682613faf565b604082019050919050565b6000602082019050818103600083015261403a81613ffe565b9050919050565b7f4d50432061646472657373206e6f742073657400000000000000000000000000600082015250565b60006140776013836131f5565b915061408282614041565b602082019050919050565b600060208201905081810360008301526140a68161406a565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b60006140e36010836131f5565b91506140ee826140ad565b602082019050919050565b60006020820190508181036000830152614112816140d6565b9050919050565b600060408201905061412e60008301856139f2565b61413b60208301846127ef565b9392505050565b6000815190506141518161310d565b92915050565b60006020828403121561416d5761416c6125e3565b5b600061417b84828501614142565b91505092915050565b7f73656e64657220646f65736e277420686176652061636365737320746f20667560008201527f6e6374696f6e0000000000000000000000000000000000000000000000000000602082015250565b60006141e06026836131f5565b91506141eb82614184565b604082019050919050565b6000602082019050818103600083015261420f816141d3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b600061427b6018836131f5565b915061428682614245565b602082019050919050565b600060208201905081810360008301526142aa8161426e565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b60006142e7601f836131f5565b91506142f2826142b1565b602082019050919050565b60006020820190508181036000830152614316816142da565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006143796022836131f5565b91506143848261431d565b604082019050919050565b600060208201905081810360008301526143a88161436c565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061440b6022836131f5565b9150614416826143af565b604082019050919050565b6000602082019050818103600083015261443a816143fe565b9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b60006144776014836131f5565b915061448282614441565b602082019050919050565b600060208201905081810360008301526144a68161446a565b9050919050565b60006080820190506144c260008301876132d6565b6144cf6020830186613034565b6144dc60408301856132d6565b6144e960608301846132d6565b95945050505050565b60006144fd82612819565b915061450883612819565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561453d5761453c6134af565b5b82820190509291505056fea26469706673582212208f7e01a5d62b6d070f85325b7b38207ef478ba2a6c3065a0daa7f5055110911f64736f6c634300080b0033",
}

// BridgeABI is the input ABI used to generate the binding from.
// Deprecated: Use BridgeMetaData.ABI instead.
var BridgeABI = BridgeMetaData.ABI

// BridgeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BridgeMetaData.Bin instead.
var BridgeBin = BridgeMetaData.Bin

// DeployBridge deploys a new Ethereum contract, binding an instance of Bridge to it.
func DeployBridge(auth *bind.TransactOpts, backend bind.ContractBackend, domainID uint8, accessControl common.Address) (common.Address, *types.Transaction, *Bridge, error) {
	parsed, err := BridgeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BridgeBin), backend, domainID, accessControl)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// Bridge is an auto generated Go binding around an Ethereum contract.
type Bridge struct {
	BridgeCaller     // Read-only binding to the contract
	BridgeTransactor // Write-only binding to the contract
	BridgeFilterer   // Log filterer for contract events
}

// BridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeSession struct {
	Contract     *Bridge           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeCallerSession struct {
	Contract *BridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeTransactorSession struct {
	Contract     *BridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeRaw struct {
	Contract *Bridge // Generic contract binding to access the raw methods on
}

// BridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeCallerRaw struct {
	Contract *BridgeCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeTransactorRaw struct {
	Contract *BridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridge creates a new instance of Bridge, bound to a specific deployed contract.
func NewBridge(address common.Address, backend bind.ContractBackend) (*Bridge, error) {
	contract, err := bindBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// NewBridgeCaller creates a new read-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeCaller(address common.Address, caller bind.ContractCaller) (*BridgeCaller, error) {
	contract, err := bindBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCaller{contract: contract}, nil
}

// NewBridgeTransactor creates a new write-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeTransactor, error) {
	contract, err := bindBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactor{contract: contract}, nil
}

// NewBridgeFilterer creates a new log filterer instance of Bridge, bound to a specific deployed contract.
func NewBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeFilterer, error) {
	contract, err := bindBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeFilterer{contract: contract}, nil
}

// bindBridge binds a generic wrapper to an already deployed contract.
func bindBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.BridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transact(opts, method, params...)
}

// MPCAddress is a free data retrieval call binding the contract method 0x059972d2.
//
// Solidity: function _MPCAddress() view returns(address)
func (_Bridge *BridgeCaller) MPCAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_MPCAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MPCAddress is a free data retrieval call binding the contract method 0x059972d2.
//
// Solidity: function _MPCAddress() view returns(address)
func (_Bridge *BridgeSession) MPCAddress() (common.Address, error) {
	return _Bridge.Contract.MPCAddress(&_Bridge.CallOpts)
}

// MPCAddress is a free data retrieval call binding the contract method 0x059972d2.
//
// Solidity: function _MPCAddress() view returns(address)
func (_Bridge *BridgeCallerSession) MPCAddress() (common.Address, error) {
	return _Bridge.Contract.MPCAddress(&_Bridge.CallOpts)
}

// AccessControl is a free data retrieval call binding the contract method 0x44e8e430.
//
// Solidity: function _accessControl() view returns(address)
func (_Bridge *BridgeCaller) AccessControl(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_accessControl")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AccessControl is a free data retrieval call binding the contract method 0x44e8e430.
//
// Solidity: function _accessControl() view returns(address)
func (_Bridge *BridgeSession) AccessControl() (common.Address, error) {
	return _Bridge.Contract.AccessControl(&_Bridge.CallOpts)
}

// AccessControl is a free data retrieval call binding the contract method 0x44e8e430.
//
// Solidity: function _accessControl() view returns(address)
func (_Bridge *BridgeCallerSession) AccessControl() (common.Address, error) {
	return _Bridge.Contract.AccessControl(&_Bridge.CallOpts)
}

// DepositCounts is a free data retrieval call binding the contract method 0x4b0b919d.
//
// Solidity: function _depositCounts(uint8 ) view returns(uint64)
func (_Bridge *BridgeCaller) DepositCounts(opts *bind.CallOpts, arg0 uint8) (uint64, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_depositCounts", arg0)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// DepositCounts is a free data retrieval call binding the contract method 0x4b0b919d.
//
// Solidity: function _depositCounts(uint8 ) view returns(uint64)
func (_Bridge *BridgeSession) DepositCounts(arg0 uint8) (uint64, error) {
	return _Bridge.Contract.DepositCounts(&_Bridge.CallOpts, arg0)
}

// DepositCounts is a free data retrieval call binding the contract method 0x4b0b919d.
//
// Solidity: function _depositCounts(uint8 ) view returns(uint64)
func (_Bridge *BridgeCallerSession) DepositCounts(arg0 uint8) (uint64, error) {
	return _Bridge.Contract.DepositCounts(&_Bridge.CallOpts, arg0)
}

// DomainID is a free data retrieval call binding the contract method 0x9dd694f4.
//
// Solidity: function _domainID() view returns(uint8)
func (_Bridge *BridgeCaller) DomainID(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_domainID")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// DomainID is a free data retrieval call binding the contract method 0x9dd694f4.
//
// Solidity: function _domainID() view returns(uint8)
func (_Bridge *BridgeSession) DomainID() (uint8, error) {
	return _Bridge.Contract.DomainID(&_Bridge.CallOpts)
}

// DomainID is a free data retrieval call binding the contract method 0x9dd694f4.
//
// Solidity: function _domainID() view returns(uint8)
func (_Bridge *BridgeCallerSession) DomainID() (uint8, error) {
	return _Bridge.Contract.DomainID(&_Bridge.CallOpts)
}

// FeeHandler is a free data retrieval call binding the contract method 0xfe4648f4.
//
// Solidity: function _feeHandler() view returns(address)
func (_Bridge *BridgeCaller) FeeHandler(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_feeHandler")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FeeHandler is a free data retrieval call binding the contract method 0xfe4648f4.
//
// Solidity: function _feeHandler() view returns(address)
func (_Bridge *BridgeSession) FeeHandler() (common.Address, error) {
	return _Bridge.Contract.FeeHandler(&_Bridge.CallOpts)
}

// FeeHandler is a free data retrieval call binding the contract method 0xfe4648f4.
//
// Solidity: function _feeHandler() view returns(address)
func (_Bridge *BridgeCallerSession) FeeHandler() (common.Address, error) {
	return _Bridge.Contract.FeeHandler(&_Bridge.CallOpts)
}

// ResourceIDToHandlerAddress is a free data retrieval call binding the contract method 0x84db809f.
//
// Solidity: function _resourceIDToHandlerAddress(bytes32 ) view returns(address)
func (_Bridge *BridgeCaller) ResourceIDToHandlerAddress(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_resourceIDToHandlerAddress", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ResourceIDToHandlerAddress is a free data retrieval call binding the contract method 0x84db809f.
//
// Solidity: function _resourceIDToHandlerAddress(bytes32 ) view returns(address)
func (_Bridge *BridgeSession) ResourceIDToHandlerAddress(arg0 [32]byte) (common.Address, error) {
	return _Bridge.Contract.ResourceIDToHandlerAddress(&_Bridge.CallOpts, arg0)
}

// ResourceIDToHandlerAddress is a free data retrieval call binding the contract method 0x84db809f.
//
// Solidity: function _resourceIDToHandlerAddress(bytes32 ) view returns(address)
func (_Bridge *BridgeCallerSession) ResourceIDToHandlerAddress(arg0 [32]byte) (common.Address, error) {
	return _Bridge.Contract.ResourceIDToHandlerAddress(&_Bridge.CallOpts, arg0)
}

// IsProposalExecuted is a free data retrieval call binding the contract method 0x9ae0bf45.
//
// Solidity: function isProposalExecuted(uint8 domainID, uint256 depositNonce) view returns(bool)
func (_Bridge *BridgeCaller) IsProposalExecuted(opts *bind.CallOpts, domainID uint8, depositNonce *big.Int) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "isProposalExecuted", domainID, depositNonce)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsProposalExecuted is a free data retrieval call binding the contract method 0x9ae0bf45.
//
// Solidity: function isProposalExecuted(uint8 domainID, uint256 depositNonce) view returns(bool)
func (_Bridge *BridgeSession) IsProposalExecuted(domainID uint8, depositNonce *big.Int) (bool, error) {
	return _Bridge.Contract.IsProposalExecuted(&_Bridge.CallOpts, domainID, depositNonce)
}

// IsProposalExecuted is a free data retrieval call binding the contract method 0x9ae0bf45.
//
// Solidity: function isProposalExecuted(uint8 domainID, uint256 depositNonce) view returns(bool)
func (_Bridge *BridgeCallerSession) IsProposalExecuted(domainID uint8, depositNonce *big.Int) (bool, error) {
	return _Bridge.Contract.IsProposalExecuted(&_Bridge.CallOpts, domainID, depositNonce)
}

// IsValidForwarder is a free data retrieval call binding the contract method 0xf8c39e44.
//
// Solidity: function isValidForwarder(address ) view returns(bool)
func (_Bridge *BridgeCaller) IsValidForwarder(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "isValidForwarder", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidForwarder is a free data retrieval call binding the contract method 0xf8c39e44.
//
// Solidity: function isValidForwarder(address ) view returns(bool)
func (_Bridge *BridgeSession) IsValidForwarder(arg0 common.Address) (bool, error) {
	return _Bridge.Contract.IsValidForwarder(&_Bridge.CallOpts, arg0)
}

// IsValidForwarder is a free data retrieval call binding the contract method 0xf8c39e44.
//
// Solidity: function isValidForwarder(address ) view returns(bool)
func (_Bridge *BridgeCallerSession) IsValidForwarder(arg0 common.Address) (bool, error) {
	return _Bridge.Contract.IsValidForwarder(&_Bridge.CallOpts, arg0)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Bridge *BridgeCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Bridge *BridgeSession) Paused() (bool, error) {
	return _Bridge.Contract.Paused(&_Bridge.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Bridge *BridgeCallerSession) Paused() (bool, error) {
	return _Bridge.Contract.Paused(&_Bridge.CallOpts)
}

// UsedNonces is a free data retrieval call binding the contract method 0x08a64104.
//
// Solidity: function usedNonces(uint8 , uint256 ) view returns(uint256)
func (_Bridge *BridgeCaller) UsedNonces(opts *bind.CallOpts, arg0 uint8, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "usedNonces", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UsedNonces is a free data retrieval call binding the contract method 0x08a64104.
//
// Solidity: function usedNonces(uint8 , uint256 ) view returns(uint256)
func (_Bridge *BridgeSession) UsedNonces(arg0 uint8, arg1 *big.Int) (*big.Int, error) {
	return _Bridge.Contract.UsedNonces(&_Bridge.CallOpts, arg0, arg1)
}

// UsedNonces is a free data retrieval call binding the contract method 0x08a64104.
//
// Solidity: function usedNonces(uint8 , uint256 ) view returns(uint256)
func (_Bridge *BridgeCallerSession) UsedNonces(arg0 uint8, arg1 *big.Int) (*big.Int, error) {
	return _Bridge.Contract.UsedNonces(&_Bridge.CallOpts, arg0, arg1)
}

// AdminChangeAccessControl is a paid mutator transaction binding the contract method 0x9d33b6d4.
//
// Solidity: function adminChangeAccessControl(address newAccessControl) returns()
func (_Bridge *BridgeTransactor) AdminChangeAccessControl(opts *bind.TransactOpts, newAccessControl common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminChangeAccessControl", newAccessControl)
}

// AdminChangeAccessControl is a paid mutator transaction binding the contract method 0x9d33b6d4.
//
// Solidity: function adminChangeAccessControl(address newAccessControl) returns()
func (_Bridge *BridgeSession) AdminChangeAccessControl(newAccessControl common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminChangeAccessControl(&_Bridge.TransactOpts, newAccessControl)
}

// AdminChangeAccessControl is a paid mutator transaction binding the contract method 0x9d33b6d4.
//
// Solidity: function adminChangeAccessControl(address newAccessControl) returns()
func (_Bridge *BridgeTransactorSession) AdminChangeAccessControl(newAccessControl common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminChangeAccessControl(&_Bridge.TransactOpts, newAccessControl)
}

// AdminChangeFeeHandler is a paid mutator transaction binding the contract method 0x8b63aebf.
//
// Solidity: function adminChangeFeeHandler(address newFeeHandler) returns()
func (_Bridge *BridgeTransactor) AdminChangeFeeHandler(opts *bind.TransactOpts, newFeeHandler common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminChangeFeeHandler", newFeeHandler)
}

// AdminChangeFeeHandler is a paid mutator transaction binding the contract method 0x8b63aebf.
//
// Solidity: function adminChangeFeeHandler(address newFeeHandler) returns()
func (_Bridge *BridgeSession) AdminChangeFeeHandler(newFeeHandler common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminChangeFeeHandler(&_Bridge.TransactOpts, newFeeHandler)
}

// AdminChangeFeeHandler is a paid mutator transaction binding the contract method 0x8b63aebf.
//
// Solidity: function adminChangeFeeHandler(address newFeeHandler) returns()
func (_Bridge *BridgeTransactorSession) AdminChangeFeeHandler(newFeeHandler common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminChangeFeeHandler(&_Bridge.TransactOpts, newFeeHandler)
}

// AdminPauseTransfers is a paid mutator transaction binding the contract method 0x80ae1c28.
//
// Solidity: function adminPauseTransfers() returns()
func (_Bridge *BridgeTransactor) AdminPauseTransfers(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminPauseTransfers")
}

// AdminPauseTransfers is a paid mutator transaction binding the contract method 0x80ae1c28.
//
// Solidity: function adminPauseTransfers() returns()
func (_Bridge *BridgeSession) AdminPauseTransfers() (*types.Transaction, error) {
	return _Bridge.Contract.AdminPauseTransfers(&_Bridge.TransactOpts)
}

// AdminPauseTransfers is a paid mutator transaction binding the contract method 0x80ae1c28.
//
// Solidity: function adminPauseTransfers() returns()
func (_Bridge *BridgeTransactorSession) AdminPauseTransfers() (*types.Transaction, error) {
	return _Bridge.Contract.AdminPauseTransfers(&_Bridge.TransactOpts)
}

// AdminSetBurnable is a paid mutator transaction binding the contract method 0x8c0c2631.
//
// Solidity: function adminSetBurnable(address handlerAddress, address tokenAddress) returns()
func (_Bridge *BridgeTransactor) AdminSetBurnable(opts *bind.TransactOpts, handlerAddress common.Address, tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminSetBurnable", handlerAddress, tokenAddress)
}

// AdminSetBurnable is a paid mutator transaction binding the contract method 0x8c0c2631.
//
// Solidity: function adminSetBurnable(address handlerAddress, address tokenAddress) returns()
func (_Bridge *BridgeSession) AdminSetBurnable(handlerAddress common.Address, tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetBurnable(&_Bridge.TransactOpts, handlerAddress, tokenAddress)
}

// AdminSetBurnable is a paid mutator transaction binding the contract method 0x8c0c2631.
//
// Solidity: function adminSetBurnable(address handlerAddress, address tokenAddress) returns()
func (_Bridge *BridgeTransactorSession) AdminSetBurnable(handlerAddress common.Address, tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetBurnable(&_Bridge.TransactOpts, handlerAddress, tokenAddress)
}

// AdminSetDepositNonce is a paid mutator transaction binding the contract method 0xedc20c3c.
//
// Solidity: function adminSetDepositNonce(uint8 domainID, uint64 nonce) returns()
func (_Bridge *BridgeTransactor) AdminSetDepositNonce(opts *bind.TransactOpts, domainID uint8, nonce uint64) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminSetDepositNonce", domainID, nonce)
}

// AdminSetDepositNonce is a paid mutator transaction binding the contract method 0xedc20c3c.
//
// Solidity: function adminSetDepositNonce(uint8 domainID, uint64 nonce) returns()
func (_Bridge *BridgeSession) AdminSetDepositNonce(domainID uint8, nonce uint64) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetDepositNonce(&_Bridge.TransactOpts, domainID, nonce)
}

// AdminSetDepositNonce is a paid mutator transaction binding the contract method 0xedc20c3c.
//
// Solidity: function adminSetDepositNonce(uint8 domainID, uint64 nonce) returns()
func (_Bridge *BridgeTransactorSession) AdminSetDepositNonce(domainID uint8, nonce uint64) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetDepositNonce(&_Bridge.TransactOpts, domainID, nonce)
}

// AdminSetForwarder is a paid mutator transaction binding the contract method 0xd15ef64e.
//
// Solidity: function adminSetForwarder(address forwarder, bool valid) returns()
func (_Bridge *BridgeTransactor) AdminSetForwarder(opts *bind.TransactOpts, forwarder common.Address, valid bool) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminSetForwarder", forwarder, valid)
}

// AdminSetForwarder is a paid mutator transaction binding the contract method 0xd15ef64e.
//
// Solidity: function adminSetForwarder(address forwarder, bool valid) returns()
func (_Bridge *BridgeSession) AdminSetForwarder(forwarder common.Address, valid bool) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetForwarder(&_Bridge.TransactOpts, forwarder, valid)
}

// AdminSetForwarder is a paid mutator transaction binding the contract method 0xd15ef64e.
//
// Solidity: function adminSetForwarder(address forwarder, bool valid) returns()
func (_Bridge *BridgeTransactorSession) AdminSetForwarder(forwarder common.Address, valid bool) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetForwarder(&_Bridge.TransactOpts, forwarder, valid)
}

// AdminSetGenericResource is a paid mutator transaction binding the contract method 0x5a1ad87c.
//
// Solidity: function adminSetGenericResource(address handlerAddress, bytes32 resourceID, address contractAddress, bytes4 depositFunctionSig, uint256 depositFunctionDepositerOffset, bytes4 executeFunctionSig) returns()
func (_Bridge *BridgeTransactor) AdminSetGenericResource(opts *bind.TransactOpts, handlerAddress common.Address, resourceID [32]byte, contractAddress common.Address, depositFunctionSig [4]byte, depositFunctionDepositerOffset *big.Int, executeFunctionSig [4]byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminSetGenericResource", handlerAddress, resourceID, contractAddress, depositFunctionSig, depositFunctionDepositerOffset, executeFunctionSig)
}

// AdminSetGenericResource is a paid mutator transaction binding the contract method 0x5a1ad87c.
//
// Solidity: function adminSetGenericResource(address handlerAddress, bytes32 resourceID, address contractAddress, bytes4 depositFunctionSig, uint256 depositFunctionDepositerOffset, bytes4 executeFunctionSig) returns()
func (_Bridge *BridgeSession) AdminSetGenericResource(handlerAddress common.Address, resourceID [32]byte, contractAddress common.Address, depositFunctionSig [4]byte, depositFunctionDepositerOffset *big.Int, executeFunctionSig [4]byte) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetGenericResource(&_Bridge.TransactOpts, handlerAddress, resourceID, contractAddress, depositFunctionSig, depositFunctionDepositerOffset, executeFunctionSig)
}

// AdminSetGenericResource is a paid mutator transaction binding the contract method 0x5a1ad87c.
//
// Solidity: function adminSetGenericResource(address handlerAddress, bytes32 resourceID, address contractAddress, bytes4 depositFunctionSig, uint256 depositFunctionDepositerOffset, bytes4 executeFunctionSig) returns()
func (_Bridge *BridgeTransactorSession) AdminSetGenericResource(handlerAddress common.Address, resourceID [32]byte, contractAddress common.Address, depositFunctionSig [4]byte, depositFunctionDepositerOffset *big.Int, executeFunctionSig [4]byte) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetGenericResource(&_Bridge.TransactOpts, handlerAddress, resourceID, contractAddress, depositFunctionSig, depositFunctionDepositerOffset, executeFunctionSig)
}

// AdminSetResource is a paid mutator transaction binding the contract method 0xcb10f215.
//
// Solidity: function adminSetResource(address handlerAddress, bytes32 resourceID, address tokenAddress) returns()
func (_Bridge *BridgeTransactor) AdminSetResource(opts *bind.TransactOpts, handlerAddress common.Address, resourceID [32]byte, tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminSetResource", handlerAddress, resourceID, tokenAddress)
}

// AdminSetResource is a paid mutator transaction binding the contract method 0xcb10f215.
//
// Solidity: function adminSetResource(address handlerAddress, bytes32 resourceID, address tokenAddress) returns()
func (_Bridge *BridgeSession) AdminSetResource(handlerAddress common.Address, resourceID [32]byte, tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetResource(&_Bridge.TransactOpts, handlerAddress, resourceID, tokenAddress)
}

// AdminSetResource is a paid mutator transaction binding the contract method 0xcb10f215.
//
// Solidity: function adminSetResource(address handlerAddress, bytes32 resourceID, address tokenAddress) returns()
func (_Bridge *BridgeTransactorSession) AdminSetResource(handlerAddress common.Address, resourceID [32]byte, tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetResource(&_Bridge.TransactOpts, handlerAddress, resourceID, tokenAddress)
}

// AdminUnpauseTransfers is a paid mutator transaction binding the contract method 0xffaac0eb.
//
// Solidity: function adminUnpauseTransfers() returns()
func (_Bridge *BridgeTransactor) AdminUnpauseTransfers(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminUnpauseTransfers")
}

// AdminUnpauseTransfers is a paid mutator transaction binding the contract method 0xffaac0eb.
//
// Solidity: function adminUnpauseTransfers() returns()
func (_Bridge *BridgeSession) AdminUnpauseTransfers() (*types.Transaction, error) {
	return _Bridge.Contract.AdminUnpauseTransfers(&_Bridge.TransactOpts)
}

// AdminUnpauseTransfers is a paid mutator transaction binding the contract method 0xffaac0eb.
//
// Solidity: function adminUnpauseTransfers() returns()
func (_Bridge *BridgeTransactorSession) AdminUnpauseTransfers() (*types.Transaction, error) {
	return _Bridge.Contract.AdminUnpauseTransfers(&_Bridge.TransactOpts)
}

// AdminWithdraw is a paid mutator transaction binding the contract method 0xbd2a1820.
//
// Solidity: function adminWithdraw(address handlerAddress, bytes data) returns()
func (_Bridge *BridgeTransactor) AdminWithdraw(opts *bind.TransactOpts, handlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminWithdraw", handlerAddress, data)
}

// AdminWithdraw is a paid mutator transaction binding the contract method 0xbd2a1820.
//
// Solidity: function adminWithdraw(address handlerAddress, bytes data) returns()
func (_Bridge *BridgeSession) AdminWithdraw(handlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.AdminWithdraw(&_Bridge.TransactOpts, handlerAddress, data)
}

// AdminWithdraw is a paid mutator transaction binding the contract method 0xbd2a1820.
//
// Solidity: function adminWithdraw(address handlerAddress, bytes data) returns()
func (_Bridge *BridgeTransactorSession) AdminWithdraw(handlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.AdminWithdraw(&_Bridge.TransactOpts, handlerAddress, data)
}

// Deposit is a paid mutator transaction binding the contract method 0x73c45c98.
//
// Solidity: function deposit(uint8 destinationDomainID, bytes32 resourceID, bytes depositData, bytes feeData) payable returns()
func (_Bridge *BridgeTransactor) Deposit(opts *bind.TransactOpts, destinationDomainID uint8, resourceID [32]byte, depositData []byte, feeData []byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "deposit", destinationDomainID, resourceID, depositData, feeData)
}

// Deposit is a paid mutator transaction binding the contract method 0x73c45c98.
//
// Solidity: function deposit(uint8 destinationDomainID, bytes32 resourceID, bytes depositData, bytes feeData) payable returns()
func (_Bridge *BridgeSession) Deposit(destinationDomainID uint8, resourceID [32]byte, depositData []byte, feeData []byte) (*types.Transaction, error) {
	return _Bridge.Contract.Deposit(&_Bridge.TransactOpts, destinationDomainID, resourceID, depositData, feeData)
}

// Deposit is a paid mutator transaction binding the contract method 0x73c45c98.
//
// Solidity: function deposit(uint8 destinationDomainID, bytes32 resourceID, bytes depositData, bytes feeData) payable returns()
func (_Bridge *BridgeTransactorSession) Deposit(destinationDomainID uint8, resourceID [32]byte, depositData []byte, feeData []byte) (*types.Transaction, error) {
	return _Bridge.Contract.Deposit(&_Bridge.TransactOpts, destinationDomainID, resourceID, depositData, feeData)
}

// EndKeygen is a paid mutator transaction binding the contract method 0xd2e5fae9.
//
// Solidity: function endKeygen(address MPCAddress) returns()
func (_Bridge *BridgeTransactor) EndKeygen(opts *bind.TransactOpts, MPCAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "endKeygen", MPCAddress)
}

// EndKeygen is a paid mutator transaction binding the contract method 0xd2e5fae9.
//
// Solidity: function endKeygen(address MPCAddress) returns()
func (_Bridge *BridgeSession) EndKeygen(MPCAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.EndKeygen(&_Bridge.TransactOpts, MPCAddress)
}

// EndKeygen is a paid mutator transaction binding the contract method 0xd2e5fae9.
//
// Solidity: function endKeygen(address MPCAddress) returns()
func (_Bridge *BridgeTransactorSession) EndKeygen(MPCAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.EndKeygen(&_Bridge.TransactOpts, MPCAddress)
}

// ExecuteProposal is a paid mutator transaction binding the contract method 0x0395974c.
//
// Solidity: function executeProposal(uint8 originDomainID, uint64 depositNonce, bytes data, bytes32 resourceID, bytes signature) returns()
func (_Bridge *BridgeTransactor) ExecuteProposal(opts *bind.TransactOpts, originDomainID uint8, depositNonce uint64, data []byte, resourceID [32]byte, signature []byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "executeProposal", originDomainID, depositNonce, data, resourceID, signature)
}

// ExecuteProposal is a paid mutator transaction binding the contract method 0x0395974c.
//
// Solidity: function executeProposal(uint8 originDomainID, uint64 depositNonce, bytes data, bytes32 resourceID, bytes signature) returns()
func (_Bridge *BridgeSession) ExecuteProposal(originDomainID uint8, depositNonce uint64, data []byte, resourceID [32]byte, signature []byte) (*types.Transaction, error) {
	return _Bridge.Contract.ExecuteProposal(&_Bridge.TransactOpts, originDomainID, depositNonce, data, resourceID, signature)
}

// ExecuteProposal is a paid mutator transaction binding the contract method 0x0395974c.
//
// Solidity: function executeProposal(uint8 originDomainID, uint64 depositNonce, bytes data, bytes32 resourceID, bytes signature) returns()
func (_Bridge *BridgeTransactorSession) ExecuteProposal(originDomainID uint8, depositNonce uint64, data []byte, resourceID [32]byte, signature []byte) (*types.Transaction, error) {
	return _Bridge.Contract.ExecuteProposal(&_Bridge.TransactOpts, originDomainID, depositNonce, data, resourceID, signature)
}

// ExecuteProposals is a paid mutator transaction binding the contract method 0x1f5c64c1.
//
// Solidity: function executeProposals((uint8,uint64,bytes32,bytes)[] proposals, bytes signature) returns()
func (_Bridge *BridgeTransactor) ExecuteProposals(opts *bind.TransactOpts, proposals []BridgeProposal, signature []byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "executeProposals", proposals, signature)
}

// ExecuteProposals is a paid mutator transaction binding the contract method 0x1f5c64c1.
//
// Solidity: function executeProposals((uint8,uint64,bytes32,bytes)[] proposals, bytes signature) returns()
func (_Bridge *BridgeSession) ExecuteProposals(proposals []BridgeProposal, signature []byte) (*types.Transaction, error) {
	return _Bridge.Contract.ExecuteProposals(&_Bridge.TransactOpts, proposals, signature)
}

// ExecuteProposals is a paid mutator transaction binding the contract method 0x1f5c64c1.
//
// Solidity: function executeProposals((uint8,uint64,bytes32,bytes)[] proposals, bytes signature) returns()
func (_Bridge *BridgeTransactorSession) ExecuteProposals(proposals []BridgeProposal, signature []byte) (*types.Transaction, error) {
	return _Bridge.Contract.ExecuteProposals(&_Bridge.TransactOpts, proposals, signature)
}

// RefreshKey is a paid mutator transaction binding the contract method 0xd8236744.
//
// Solidity: function refreshKey(string hash) returns()
func (_Bridge *BridgeTransactor) RefreshKey(opts *bind.TransactOpts, hash string) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "refreshKey", hash)
}

// RefreshKey is a paid mutator transaction binding the contract method 0xd8236744.
//
// Solidity: function refreshKey(string hash) returns()
func (_Bridge *BridgeSession) RefreshKey(hash string) (*types.Transaction, error) {
	return _Bridge.Contract.RefreshKey(&_Bridge.TransactOpts, hash)
}

// RefreshKey is a paid mutator transaction binding the contract method 0xd8236744.
//
// Solidity: function refreshKey(string hash) returns()
func (_Bridge *BridgeTransactorSession) RefreshKey(hash string) (*types.Transaction, error) {
	return _Bridge.Contract.RefreshKey(&_Bridge.TransactOpts, hash)
}

// Retry is a paid mutator transaction binding the contract method 0x366b4885.
//
// Solidity: function retry(string txHash) returns()
func (_Bridge *BridgeTransactor) Retry(opts *bind.TransactOpts, txHash string) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "retry", txHash)
}

// Retry is a paid mutator transaction binding the contract method 0x366b4885.
//
// Solidity: function retry(string txHash) returns()
func (_Bridge *BridgeSession) Retry(txHash string) (*types.Transaction, error) {
	return _Bridge.Contract.Retry(&_Bridge.TransactOpts, txHash)
}

// Retry is a paid mutator transaction binding the contract method 0x366b4885.
//
// Solidity: function retry(string txHash) returns()
func (_Bridge *BridgeTransactorSession) Retry(txHash string) (*types.Transaction, error) {
	return _Bridge.Contract.Retry(&_Bridge.TransactOpts, txHash)
}

// StartKeygen is a paid mutator transaction binding the contract method 0x6ba6db6b.
//
// Solidity: function startKeygen() returns()
func (_Bridge *BridgeTransactor) StartKeygen(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "startKeygen")
}

// StartKeygen is a paid mutator transaction binding the contract method 0x6ba6db6b.
//
// Solidity: function startKeygen() returns()
func (_Bridge *BridgeSession) StartKeygen() (*types.Transaction, error) {
	return _Bridge.Contract.StartKeygen(&_Bridge.TransactOpts)
}

// StartKeygen is a paid mutator transaction binding the contract method 0x6ba6db6b.
//
// Solidity: function startKeygen() returns()
func (_Bridge *BridgeTransactorSession) StartKeygen() (*types.Transaction, error) {
	return _Bridge.Contract.StartKeygen(&_Bridge.TransactOpts)
}

// BridgeAccessControlChangedIterator is returned from FilterAccessControlChanged and is used to iterate over the raw logs and unpacked data for AccessControlChanged events raised by the Bridge contract.
type BridgeAccessControlChangedIterator struct {
	Event *BridgeAccessControlChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeAccessControlChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeAccessControlChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeAccessControlChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeAccessControlChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeAccessControlChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeAccessControlChanged represents a AccessControlChanged event raised by the Bridge contract.
type BridgeAccessControlChanged struct {
	NewAccessControl common.Address
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessControlChanged is a free log retrieval operation binding the contract event 0x497acaa34ac19c2a2a579ad43eca493b4fea820459e254e9383e7dda216b0f04.
//
// Solidity: event AccessControlChanged(address newAccessControl)
func (_Bridge *BridgeFilterer) FilterAccessControlChanged(opts *bind.FilterOpts) (*BridgeAccessControlChangedIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "AccessControlChanged")
	if err != nil {
		return nil, err
	}
	return &BridgeAccessControlChangedIterator{contract: _Bridge.contract, event: "AccessControlChanged", logs: logs, sub: sub}, nil
}

// WatchAccessControlChanged is a free log subscription operation binding the contract event 0x497acaa34ac19c2a2a579ad43eca493b4fea820459e254e9383e7dda216b0f04.
//
// Solidity: event AccessControlChanged(address newAccessControl)
func (_Bridge *BridgeFilterer) WatchAccessControlChanged(opts *bind.WatchOpts, sink chan<- *BridgeAccessControlChanged) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "AccessControlChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeAccessControlChanged)
				if err := _Bridge.contract.UnpackLog(event, "AccessControlChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessControlChanged is a log parse operation binding the contract event 0x497acaa34ac19c2a2a579ad43eca493b4fea820459e254e9383e7dda216b0f04.
//
// Solidity: event AccessControlChanged(address newAccessControl)
func (_Bridge *BridgeFilterer) ParseAccessControlChanged(log types.Log) (*BridgeAccessControlChanged, error) {
	event := new(BridgeAccessControlChanged)
	if err := _Bridge.contract.UnpackLog(event, "AccessControlChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Bridge contract.
type BridgeDepositIterator struct {
	Event *BridgeDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeDeposit represents a Deposit event raised by the Bridge contract.
type BridgeDeposit struct {
	DestinationDomainID uint8
	ResourceID          [32]byte
	DepositNonce        uint64
	User                common.Address
	Data                []byte
	HandlerResponse     []byte
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x17bc3181e17a9620a479c24e6c606e474ba84fc036877b768926872e8cd0e11f.
//
// Solidity: event Deposit(uint8 destinationDomainID, bytes32 resourceID, uint64 depositNonce, address indexed user, bytes data, bytes handlerResponse)
func (_Bridge *BridgeFilterer) FilterDeposit(opts *bind.FilterOpts, user []common.Address) (*BridgeDepositIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "Deposit", userRule)
	if err != nil {
		return nil, err
	}
	return &BridgeDepositIterator{contract: _Bridge.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x17bc3181e17a9620a479c24e6c606e474ba84fc036877b768926872e8cd0e11f.
//
// Solidity: event Deposit(uint8 destinationDomainID, bytes32 resourceID, uint64 depositNonce, address indexed user, bytes data, bytes handlerResponse)
func (_Bridge *BridgeFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *BridgeDeposit, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "Deposit", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeDeposit)
				if err := _Bridge.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x17bc3181e17a9620a479c24e6c606e474ba84fc036877b768926872e8cd0e11f.
//
// Solidity: event Deposit(uint8 destinationDomainID, bytes32 resourceID, uint64 depositNonce, address indexed user, bytes data, bytes handlerResponse)
func (_Bridge *BridgeFilterer) ParseDeposit(log types.Log) (*BridgeDeposit, error) {
	event := new(BridgeDeposit)
	if err := _Bridge.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeEndKeygenIterator is returned from FilterEndKeygen and is used to iterate over the raw logs and unpacked data for EndKeygen events raised by the Bridge contract.
type BridgeEndKeygenIterator struct {
	Event *BridgeEndKeygen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeEndKeygenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeEndKeygen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeEndKeygen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeEndKeygenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeEndKeygenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeEndKeygen represents a EndKeygen event raised by the Bridge contract.
type BridgeEndKeygen struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEndKeygen is a free log retrieval operation binding the contract event 0x4187686ceef7b541a1f224d48d4cded8f2c535e0e58ac0f0514071b1de3dad57.
//
// Solidity: event EndKeygen()
func (_Bridge *BridgeFilterer) FilterEndKeygen(opts *bind.FilterOpts) (*BridgeEndKeygenIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "EndKeygen")
	if err != nil {
		return nil, err
	}
	return &BridgeEndKeygenIterator{contract: _Bridge.contract, event: "EndKeygen", logs: logs, sub: sub}, nil
}

// WatchEndKeygen is a free log subscription operation binding the contract event 0x4187686ceef7b541a1f224d48d4cded8f2c535e0e58ac0f0514071b1de3dad57.
//
// Solidity: event EndKeygen()
func (_Bridge *BridgeFilterer) WatchEndKeygen(opts *bind.WatchOpts, sink chan<- *BridgeEndKeygen) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "EndKeygen")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeEndKeygen)
				if err := _Bridge.contract.UnpackLog(event, "EndKeygen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEndKeygen is a log parse operation binding the contract event 0x4187686ceef7b541a1f224d48d4cded8f2c535e0e58ac0f0514071b1de3dad57.
//
// Solidity: event EndKeygen()
func (_Bridge *BridgeFilterer) ParseEndKeygen(log types.Log) (*BridgeEndKeygen, error) {
	event := new(BridgeEndKeygen)
	if err := _Bridge.contract.UnpackLog(event, "EndKeygen", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeFailedHandlerExecutionIterator is returned from FilterFailedHandlerExecution and is used to iterate over the raw logs and unpacked data for FailedHandlerExecution events raised by the Bridge contract.
type BridgeFailedHandlerExecutionIterator struct {
	Event *BridgeFailedHandlerExecution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeFailedHandlerExecutionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeFailedHandlerExecution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeFailedHandlerExecution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeFailedHandlerExecutionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeFailedHandlerExecutionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeFailedHandlerExecution represents a FailedHandlerExecution event raised by the Bridge contract.
type BridgeFailedHandlerExecution struct {
	LowLevelData   []byte
	OriginDomainID uint8
	DepositNonce   uint64
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterFailedHandlerExecution is a free log retrieval operation binding the contract event 0x19f774a63ee465292252a9981ae52051acc13da671c698ac4b5bf25b38c5b6fc.
//
// Solidity: event FailedHandlerExecution(bytes lowLevelData, uint8 originDomainID, uint64 depositNonce)
func (_Bridge *BridgeFilterer) FilterFailedHandlerExecution(opts *bind.FilterOpts) (*BridgeFailedHandlerExecutionIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "FailedHandlerExecution")
	if err != nil {
		return nil, err
	}
	return &BridgeFailedHandlerExecutionIterator{contract: _Bridge.contract, event: "FailedHandlerExecution", logs: logs, sub: sub}, nil
}

// WatchFailedHandlerExecution is a free log subscription operation binding the contract event 0x19f774a63ee465292252a9981ae52051acc13da671c698ac4b5bf25b38c5b6fc.
//
// Solidity: event FailedHandlerExecution(bytes lowLevelData, uint8 originDomainID, uint64 depositNonce)
func (_Bridge *BridgeFilterer) WatchFailedHandlerExecution(opts *bind.WatchOpts, sink chan<- *BridgeFailedHandlerExecution) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "FailedHandlerExecution")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeFailedHandlerExecution)
				if err := _Bridge.contract.UnpackLog(event, "FailedHandlerExecution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFailedHandlerExecution is a log parse operation binding the contract event 0x19f774a63ee465292252a9981ae52051acc13da671c698ac4b5bf25b38c5b6fc.
//
// Solidity: event FailedHandlerExecution(bytes lowLevelData, uint8 originDomainID, uint64 depositNonce)
func (_Bridge *BridgeFilterer) ParseFailedHandlerExecution(log types.Log) (*BridgeFailedHandlerExecution, error) {
	event := new(BridgeFailedHandlerExecution)
	if err := _Bridge.contract.UnpackLog(event, "FailedHandlerExecution", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeFeeHandlerChangedIterator is returned from FilterFeeHandlerChanged and is used to iterate over the raw logs and unpacked data for FeeHandlerChanged events raised by the Bridge contract.
type BridgeFeeHandlerChangedIterator struct {
	Event *BridgeFeeHandlerChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeFeeHandlerChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeFeeHandlerChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeFeeHandlerChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeFeeHandlerChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeFeeHandlerChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeFeeHandlerChanged represents a FeeHandlerChanged event raised by the Bridge contract.
type BridgeFeeHandlerChanged struct {
	NewFeeHandler common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterFeeHandlerChanged is a free log retrieval operation binding the contract event 0x729170bd142e4965055b26a285faeedf03baf2b915bfc5a7c75d24b45815ff2c.
//
// Solidity: event FeeHandlerChanged(address newFeeHandler)
func (_Bridge *BridgeFilterer) FilterFeeHandlerChanged(opts *bind.FilterOpts) (*BridgeFeeHandlerChangedIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "FeeHandlerChanged")
	if err != nil {
		return nil, err
	}
	return &BridgeFeeHandlerChangedIterator{contract: _Bridge.contract, event: "FeeHandlerChanged", logs: logs, sub: sub}, nil
}

// WatchFeeHandlerChanged is a free log subscription operation binding the contract event 0x729170bd142e4965055b26a285faeedf03baf2b915bfc5a7c75d24b45815ff2c.
//
// Solidity: event FeeHandlerChanged(address newFeeHandler)
func (_Bridge *BridgeFilterer) WatchFeeHandlerChanged(opts *bind.WatchOpts, sink chan<- *BridgeFeeHandlerChanged) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "FeeHandlerChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeFeeHandlerChanged)
				if err := _Bridge.contract.UnpackLog(event, "FeeHandlerChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFeeHandlerChanged is a log parse operation binding the contract event 0x729170bd142e4965055b26a285faeedf03baf2b915bfc5a7c75d24b45815ff2c.
//
// Solidity: event FeeHandlerChanged(address newFeeHandler)
func (_Bridge *BridgeFilterer) ParseFeeHandlerChanged(log types.Log) (*BridgeFeeHandlerChanged, error) {
	event := new(BridgeFeeHandlerChanged)
	if err := _Bridge.contract.UnpackLog(event, "FeeHandlerChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeKeyRefreshIterator is returned from FilterKeyRefresh and is used to iterate over the raw logs and unpacked data for KeyRefresh events raised by the Bridge contract.
type BridgeKeyRefreshIterator struct {
	Event *BridgeKeyRefresh // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeKeyRefreshIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeKeyRefresh)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeKeyRefresh)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeKeyRefreshIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeKeyRefreshIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeKeyRefresh represents a KeyRefresh event raised by the Bridge contract.
type BridgeKeyRefresh struct {
	Hash string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterKeyRefresh is a free log retrieval operation binding the contract event 0xe78d813a9260522f81d6c761e311727b2e19008daadd2b9e174be86bc4f06a4b.
//
// Solidity: event KeyRefresh(string hash)
func (_Bridge *BridgeFilterer) FilterKeyRefresh(opts *bind.FilterOpts) (*BridgeKeyRefreshIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "KeyRefresh")
	if err != nil {
		return nil, err
	}
	return &BridgeKeyRefreshIterator{contract: _Bridge.contract, event: "KeyRefresh", logs: logs, sub: sub}, nil
}

// WatchKeyRefresh is a free log subscription operation binding the contract event 0xe78d813a9260522f81d6c761e311727b2e19008daadd2b9e174be86bc4f06a4b.
//
// Solidity: event KeyRefresh(string hash)
func (_Bridge *BridgeFilterer) WatchKeyRefresh(opts *bind.WatchOpts, sink chan<- *BridgeKeyRefresh) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "KeyRefresh")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeKeyRefresh)
				if err := _Bridge.contract.UnpackLog(event, "KeyRefresh", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyRefresh is a log parse operation binding the contract event 0xe78d813a9260522f81d6c761e311727b2e19008daadd2b9e174be86bc4f06a4b.
//
// Solidity: event KeyRefresh(string hash)
func (_Bridge *BridgeFilterer) ParseKeyRefresh(log types.Log) (*BridgeKeyRefresh, error) {
	event := new(BridgeKeyRefresh)
	if err := _Bridge.contract.UnpackLog(event, "KeyRefresh", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Bridge contract.
type BridgePausedIterator struct {
	Event *BridgePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgePaused represents a Paused event raised by the Bridge contract.
type BridgePaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Bridge *BridgeFilterer) FilterPaused(opts *bind.FilterOpts) (*BridgePausedIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &BridgePausedIterator{contract: _Bridge.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Bridge *BridgeFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *BridgePaused) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgePaused)
				if err := _Bridge.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Bridge *BridgeFilterer) ParsePaused(log types.Log) (*BridgePaused, error) {
	event := new(BridgePaused)
	if err := _Bridge.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeProposalExecutionIterator is returned from FilterProposalExecution and is used to iterate over the raw logs and unpacked data for ProposalExecution events raised by the Bridge contract.
type BridgeProposalExecutionIterator struct {
	Event *BridgeProposalExecution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeProposalExecutionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeProposalExecution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeProposalExecution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeProposalExecutionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeProposalExecutionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeProposalExecution represents a ProposalExecution event raised by the Bridge contract.
type BridgeProposalExecution struct {
	OriginDomainID uint8
	DepositNonce   uint64
	DataHash       [32]byte
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterProposalExecution is a free log retrieval operation binding the contract event 0x6018c584b8d99bafeda249b2429f5907d830e792222070c1b3a94aa76ee71677.
//
// Solidity: event ProposalExecution(uint8 originDomainID, uint64 depositNonce, bytes32 dataHash)
func (_Bridge *BridgeFilterer) FilterProposalExecution(opts *bind.FilterOpts) (*BridgeProposalExecutionIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "ProposalExecution")
	if err != nil {
		return nil, err
	}
	return &BridgeProposalExecutionIterator{contract: _Bridge.contract, event: "ProposalExecution", logs: logs, sub: sub}, nil
}

// WatchProposalExecution is a free log subscription operation binding the contract event 0x6018c584b8d99bafeda249b2429f5907d830e792222070c1b3a94aa76ee71677.
//
// Solidity: event ProposalExecution(uint8 originDomainID, uint64 depositNonce, bytes32 dataHash)
func (_Bridge *BridgeFilterer) WatchProposalExecution(opts *bind.WatchOpts, sink chan<- *BridgeProposalExecution) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "ProposalExecution")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeProposalExecution)
				if err := _Bridge.contract.UnpackLog(event, "ProposalExecution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProposalExecution is a log parse operation binding the contract event 0x6018c584b8d99bafeda249b2429f5907d830e792222070c1b3a94aa76ee71677.
//
// Solidity: event ProposalExecution(uint8 originDomainID, uint64 depositNonce, bytes32 dataHash)
func (_Bridge *BridgeFilterer) ParseProposalExecution(log types.Log) (*BridgeProposalExecution, error) {
	event := new(BridgeProposalExecution)
	if err := _Bridge.contract.UnpackLog(event, "ProposalExecution", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeRetryIterator is returned from FilterRetry and is used to iterate over the raw logs and unpacked data for Retry events raised by the Bridge contract.
type BridgeRetryIterator struct {
	Event *BridgeRetry // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRetryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRetry)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRetry)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRetryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRetryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRetry represents a Retry event raised by the Bridge contract.
type BridgeRetry struct {
	TxHash string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRetry is a free log retrieval operation binding the contract event 0x9069464c059b9a90135a3fdf2c47855263346b912894ad7562d989532c3fad4c.
//
// Solidity: event Retry(string txHash)
func (_Bridge *BridgeFilterer) FilterRetry(opts *bind.FilterOpts) (*BridgeRetryIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "Retry")
	if err != nil {
		return nil, err
	}
	return &BridgeRetryIterator{contract: _Bridge.contract, event: "Retry", logs: logs, sub: sub}, nil
}

// WatchRetry is a free log subscription operation binding the contract event 0x9069464c059b9a90135a3fdf2c47855263346b912894ad7562d989532c3fad4c.
//
// Solidity: event Retry(string txHash)
func (_Bridge *BridgeFilterer) WatchRetry(opts *bind.WatchOpts, sink chan<- *BridgeRetry) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "Retry")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRetry)
				if err := _Bridge.contract.UnpackLog(event, "Retry", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRetry is a log parse operation binding the contract event 0x9069464c059b9a90135a3fdf2c47855263346b912894ad7562d989532c3fad4c.
//
// Solidity: event Retry(string txHash)
func (_Bridge *BridgeFilterer) ParseRetry(log types.Log) (*BridgeRetry, error) {
	event := new(BridgeRetry)
	if err := _Bridge.contract.UnpackLog(event, "Retry", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeStartKeygenIterator is returned from FilterStartKeygen and is used to iterate over the raw logs and unpacked data for StartKeygen events raised by the Bridge contract.
type BridgeStartKeygenIterator struct {
	Event *BridgeStartKeygen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeStartKeygenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeStartKeygen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeStartKeygen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeStartKeygenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeStartKeygenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeStartKeygen represents a StartKeygen event raised by the Bridge contract.
type BridgeStartKeygen struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterStartKeygen is a free log retrieval operation binding the contract event 0x24e723a5c27b62883404028b8dee9965934de6a46828cda2ff63bf9a5e65ce43.
//
// Solidity: event StartKeygen()
func (_Bridge *BridgeFilterer) FilterStartKeygen(opts *bind.FilterOpts) (*BridgeStartKeygenIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "StartKeygen")
	if err != nil {
		return nil, err
	}
	return &BridgeStartKeygenIterator{contract: _Bridge.contract, event: "StartKeygen", logs: logs, sub: sub}, nil
}

// WatchStartKeygen is a free log subscription operation binding the contract event 0x24e723a5c27b62883404028b8dee9965934de6a46828cda2ff63bf9a5e65ce43.
//
// Solidity: event StartKeygen()
func (_Bridge *BridgeFilterer) WatchStartKeygen(opts *bind.WatchOpts, sink chan<- *BridgeStartKeygen) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "StartKeygen")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeStartKeygen)
				if err := _Bridge.contract.UnpackLog(event, "StartKeygen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStartKeygen is a log parse operation binding the contract event 0x24e723a5c27b62883404028b8dee9965934de6a46828cda2ff63bf9a5e65ce43.
//
// Solidity: event StartKeygen()
func (_Bridge *BridgeFilterer) ParseStartKeygen(log types.Log) (*BridgeStartKeygen, error) {
	event := new(BridgeStartKeygen)
	if err := _Bridge.contract.UnpackLog(event, "StartKeygen", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Bridge contract.
type BridgeUnpausedIterator struct {
	Event *BridgeUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeUnpaused represents a Unpaused event raised by the Bridge contract.
type BridgeUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Bridge *BridgeFilterer) FilterUnpaused(opts *bind.FilterOpts) (*BridgeUnpausedIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &BridgeUnpausedIterator{contract: _Bridge.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Bridge *BridgeFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *BridgeUnpaused) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeUnpaused)
				if err := _Bridge.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Bridge *BridgeFilterer) ParseUnpaused(log types.Log) (*BridgeUnpaused, error) {
	event := new(BridgeUnpaused)
	if err := _Bridge.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
