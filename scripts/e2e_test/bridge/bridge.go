// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bridge

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BridgeABI is the input ABI used to generate the binding from.
const BridgeABI = "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"domainID\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"destinationDomainID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"handlerResponse\",\"type\":\"bytes\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EndKeygen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lowLevelData\",\"type\":\"bytes\"}],\"name\":\"FailedHandlerExecution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeHandler\",\"type\":\"address\"}],\"name\":\"FeeHandlerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"KeyRefresh\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"originDomainID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalExecution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StartKeygen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MPCAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"_depositCounts\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_domainID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeHandler\",\"outputs\":[{\"internalType\":\"contractIFeeHandler\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_resourceIDToHandlerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeHandler\",\"type\":\"address\"}],\"name\":\"adminChangeFeeHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminPauseTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"adminSetBurnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"domainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"name\":\"adminSetDepositNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"name\":\"adminSetForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"depositFunctionSig\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"depositFunctionDepositerOffset\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"executeFunctionSig\",\"type\":\"bytes4\"}],\"name\":\"adminSetGenericResource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"adminSetResource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminUnpauseTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"adminWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"destinationDomainID\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"feeData\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"MPCAddress\",\"type\":\"address\"}],\"name\":\"endKeygen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"originDomainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRoleMemberIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"domainID\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"}],\"name\":\"isProposalExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"renounceAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startKeygen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usedNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// BridgeBin is the compiled bytecode used for deploying new contracts.
var BridgeBin = "0x60806040523480156200001157600080fd5b506040516200453f3803806200453f8339818101604052810190620000379190620003bf565b60008060006101000a81548160ff02191690831515021790555080600260006101000a81548160ff021916908360ff160217905550620000906000801b62000084620000b760201b60201c565b6200013460201b60201c565b620000b0620000a4620000b760201b60201c565b6200014a60201b60201c565b50620004d6565b60008033905060146000369050101580156200011c5750600660008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b156200012d57601436033560601c90505b8091505090565b620001468282620001b060201b60201c565b5050565b6200015a6200025460201b60201c565b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25881604051620001a5919062000436565b60405180910390a150565b620001df8160016000858152602001908152602001600020600001620002a760201b62001aac1790919060201c565b156200025057620001f5620000b760201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60008054906101000a900460ff1615620002a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200029c90620004b4565b60405180910390fd5b565b6000620002d7836000018373ffffffffffffffffffffffffffffffffffffffff1660001b620002df60201b60201c565b905092915050565b6000620002f383836200035960201b60201c565b6200034e57826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905062000353565b600090505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b600080fd5b600060ff82169050919050565b620003998162000381565b8114620003a557600080fd5b50565b600081519050620003b9816200038e565b92915050565b600060208284031215620003d857620003d76200037c565b5b6000620003e884828501620003a8565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200041e82620003f1565b9050919050565b620004308162000411565b82525050565b60006020820190506200044d600083018462000425565b92915050565b600082825260208201905092915050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b60006200049c60108362000453565b9150620004a98262000464565b602082019050919050565b60006020820190508181036000830152620004cf816200048d565b9050919050565b61405980620004e66000396000f3fe6080604052600436106101ee5760003560e01c80638c0c26311161010d578063cb10f215116100a0578063edc20c3c1161006f578063edc20c3c146106fa578063f5f63b3914610723578063f8c39e441461073a578063fe4648f414610777578063ffaac0eb146107a2576101ee565b8063cb10f21514610656578063d15ef64e1461067f578063d2e5fae9146106a8578063d547741f146106d1576101ee565b80639dd694f4116100dc5780639dd694f41461059a578063a217fddf146105c5578063bd2a1820146105f0578063ca15c87314610619576101ee565b80638c0c2631146104ba5780639010d07c146104e357806391d14854146105205780639ae0bf451461055d576101ee565b80635a1ad87c1161018557806373c45c981161015457806373c45c981461042157806380ae1c281461043d57806384db809f146104545780638b63aebf14610491576101ee565b80635a1ad87c1461038d5780635c975abb146103b65780635e1fab0f146103e15780636ba6db6b1461040a576101ee565b80632f2ff15d116101c15780632f2ff15d146102c157806336568abe146102ea5780634b0b919d146103135780634e0df3f614610350576101ee565b80630395974c146101f3578063059972d21461021c57806308a6410414610247578063248a9ca314610284575b600080fd5b3480156101ff57600080fd5b5061021a600480360381019061021591906125b0565b6107b9565b005b34801561022857600080fd5b50610231610ad3565b60405161023e91906126ad565b60405180910390f35b34801561025357600080fd5b5061026e600480360381019061026991906126fe565b610af9565b60405161027b919061274d565b60405180910390f35b34801561029057600080fd5b506102ab60048036038101906102a69190612768565b610b1e565b6040516102b891906127a4565b60405180910390f35b3480156102cd57600080fd5b506102e860048036038101906102e391906127eb565b610b3e565b005b3480156102f657600080fd5b50610311600480360381019061030c91906127eb565b610bb2565b005b34801561031f57600080fd5b5061033a6004803603810190610335919061282b565b610c35565b6040516103479190612867565b60405180910390f35b34801561035c57600080fd5b50610377600480360381019061037291906127eb565b610c5c565b604051610384919061274d565b60405180910390f35b34801561039957600080fd5b506103b460048036038101906103af91906128da565b610cad565b005b3480156103c257600080fd5b506103cb610d88565b6040516103d89190612982565b60405180910390f35b3480156103ed57600080fd5b506104086004803603810190610403919061299d565b610d9e565b005b34801561041657600080fd5b5061041f610e3f565b005b61043b600480360381019061043691906129ca565b610f06565b005b34801561044957600080fd5b506104526112bc565b005b34801561046057600080fd5b5061047b60048036038101906104769190612768565b6112d6565b60405161048891906126ad565b60405180910390f35b34801561049d57600080fd5b506104b860048036038101906104b3919061299d565b611309565b005b3480156104c657600080fd5b506104e160048036038101906104dc9190612a71565b61138c565b005b3480156104ef57600080fd5b5061050a60048036038101906105059190612ab1565b611409565b60405161051791906126ad565b60405180910390f35b34801561052c57600080fd5b50610547600480360381019061054291906127eb565b61143b565b6040516105549190612982565b60405180910390f35b34801561056957600080fd5b50610584600480360381019061057f91906126fe565b61146d565b6040516105919190612982565b60405180910390f35b3480156105a657600080fd5b506105af6114c5565b6040516105bc9190612b00565b60405180910390f35b3480156105d157600080fd5b506105da6114d8565b6040516105e791906127a4565b60405180910390f35b3480156105fc57600080fd5b5061061760048036038101906106129190612c5c565b6114df565b005b34801561062557600080fd5b50610640600480360381019061063b9190612768565b61155c565b60405161064d919061274d565b60405180910390f35b34801561066257600080fd5b5061067d60048036038101906106789190612cb8565b611583565b005b34801561068b57600080fd5b506106a660048036038101906106a19190612d37565b611655565b005b3480156106b457600080fd5b506106cf60048036038101906106ca919061299d565b6116b8565b005b3480156106dd57600080fd5b506106f860048036038101906106f391906127eb565b611841565b005b34801561070657600080fd5b50610721600480360381019061071c9190612d77565b6118b5565b005b34801561072f57600080fd5b50610738611984565b005b34801561074657600080fd5b50610761600480360381019061075c919061299d565b6119ba565b60405161076e9190612982565b60405180910390f35b34801561078357600080fd5b5061078c6119da565b6040516107999190612e16565b60405180910390f35b3480156107ae57600080fd5b506107b7611a00565b005b6107c1611adc565b600115156107d9888867ffffffffffffffff1661146d565b1515141561081c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081390612eb4565b60405180910390fd5b60006108b483838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505089600260009054906101000a900460ff168a8a8a8a60405160200161089096959493929190612f91565b60405160208183030381529060405280519060200120611b2c90919063ffffffff16565b9050600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610946576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093d9061303a565b60405180910390fd5b60006005600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000818888604051602001610995939291906130a2565b60405160208183030381529060405280519060200120905060008290506101008a6109c091906130fb565b67ffffffffffffffff166001901b600760008d60ff1660ff16815260200190815260200160002060006101008d6109f7919061315b565b67ffffffffffffffff168152602001908152602001600020600082825417925050819055508073ffffffffffffffffffffffffffffffffffffffff1663e248cff2888b8b6040518463ffffffff1660e01b8152600401610a59939291906131ca565b600060405180830381600087803b158015610a7357600080fd5b505af1158015610a87573d6000803e3d6000fd5b505050507f6018c584b8d99bafeda249b2429f5907d830e792222070c1b3a94aa76ee716778b8b84604051610abe939291906131fc565b60405180910390a15050505050505050505050565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6007602052816000526040600020602052806000526040600020600091509150505481565b600060016000838152602001908152602001600020600201549050919050565b610b656001600084815260200190815260200160002060020154610b60611b53565b61143b565b610ba4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9b906132a5565b60405180910390fd5b610bae8282611bce565b5050565b610bba611b53565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1e90613337565b60405180910390fd5b610c318282611c62565b5050565b60046020528060005260406000206000915054906101000a900467ffffffffffffffff1681565b60006001600084815260200190815260200160002060000160000160010160008373ffffffffffffffffffffffffffffffffffffffff1660001b815260200190815260200160002054905092915050565b610cb5611cf6565b856005600087815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008690508073ffffffffffffffffffffffffffffffffffffffff1663de319d9987878787876040518663ffffffff1660e01b8152600401610d4d959493929190613366565b600060405180830381600087803b158015610d6757600080fd5b505af1158015610d7b573d6000803e3d6000fd5b5050505050505050505050565b60008060009054906101000a900460ff16905090565b610da6611cf6565b6000610db0611b53565b90508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1890613405565b60405180910390fd5b610e2e6000801b83610b3e565b610e3b6000801b82610bb2565b5050565b610e47611cf6565b600073ffffffffffffffffffffffffffffffffffffffff16600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ed8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecf90613471565b60405180910390fd5b7f24e723a5c27b62883404028b8dee9965934de6a46828cda2ff63bf9a5e65ce4360405160405180910390a1565b610f0e611adc565b600260009054906101000a900460ff1660ff168660ff161415610f66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5d906134dd565b60405180910390fd5b6000610f70611b53565b9050600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611011576000341461100c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100390613549565b60405180910390fd5b6110bd565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663253070653483600260009054906101000a900460ff168b8b8b8b8b8b6040518a63ffffffff1660e01b815260040161108a989796959493929190613569565b6000604051808303818588803b1580156110a357600080fd5b505af11580156110b7573d6000803e3d6000fd5b50505050505b60006005600088815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611165576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115c90613628565b60405180910390fd5b6000600460008a60ff1660ff168152602001908152602001600020600081819054906101000a900467ffffffffffffffff166111a090613648565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790559050600082905060008173ffffffffffffffffffffffffffffffffffffffff1663b07e54bb8b878c8c6040518563ffffffff1660e01b815260040161120d9493929190613679565b6000604051808303816000875af115801561122c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611255919061375c565b90508473ffffffffffffffffffffffffffffffffffffffff167f17bc3181e17a9620a479c24e6c606e474ba84fc036877b768926872e8cd0e11f8c8c868d8d876040516112a7969594939291906137e9565b60405180910390a25050505050505050505050565b6112c4611cf6565b6112d46112cf611b53565b611d4b565b565b60056020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611311611cf6565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f729170bd142e4965055b26a285faeedf03baf2b915bfc5a7c75d24b45815ff2c8160405161138191906126ad565b60405180910390a150565b611394611cf6565b60008290508073ffffffffffffffffffffffffffffffffffffffff166307b7ed99836040518263ffffffff1660e01b81526004016113d291906126ad565b600060405180830381600087803b1580156113ec57600080fd5b505af1158015611400573d6000803e3d6000fd5b50505050505050565b60006114338260016000868152602001908152602001600020600001611da790919063ffffffff16565b905092915050565b60006114658260016000868152602001908152602001600020600001611dc190919063ffffffff16565b905092915050565b6000806101008361147e919061384c565b6001901b600760008660ff1660ff1681526020019081526020016000206000610100866114ab919061387d565b815260200190815260200160002054161415905092915050565b600260009054906101000a900460ff1681565b6000801b81565b6114e7611cf6565b60008290508073ffffffffffffffffffffffffffffffffffffffff16630968f264836040518263ffffffff1660e01b815260040161152591906138ae565b600060405180830381600087803b15801561153f57600080fd5b505af1158015611553573d6000803e3d6000fd5b50505050505050565b600061157c60016000848152602001908152602001600020600001611df1565b9050919050565b61158b611cf6565b826005600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008390508073ffffffffffffffffffffffffffffffffffffffff1663b8fa373684846040518363ffffffff1660e01b815260040161161d9291906138d0565b600060405180830381600087803b15801561163757600080fd5b505af115801561164b573d6000803e3d6000fd5b5050505050505050565b61165d611cf6565b80600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6116c0611cf6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611730576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117279061396b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146117c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b8906139d7565b60405180910390fd5b80600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061181261180d611b53565b611e06565b7f4187686ceef7b541a1f224d48d4cded8f2c535e0e58ac0f0514071b1de3dad5760405160405180910390a150565b6118686001600084815260200190815260200160002060020154611863611b53565b61143b565b6118a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189e90613a69565b60405180910390fd5b6118b18282611c62565b5050565b6118bd611cf6565b600460008360ff1660ff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff168167ffffffffffffffff1611611940576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193790613afb565b60405180910390fd5b80600460008460ff1660ff16815260200190815260200160002060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050565b61198c611cf6565b7f034a03238f3c0f2cad22894b0fa8810b6ffcf678a2560e54a7e41b4e9cebd02e60405160405180910390a1565b60066020528060005260406000206000915054906101000a900460ff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611a08611cf6565b600073ffffffffffffffffffffffffffffffffffffffff16600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611a9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9190613b67565b60405180910390fd5b611aaa611aa5611b53565b611e06565b565b6000611ad4836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611e62565b905092915050565b60008054906101000a900460ff1615611b2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2190613bd3565b60405180910390fd5b565b6000806000611b3b8585611ed2565b91509150611b4881611f55565b819250505092915050565b6000803390506014600036905010158015611bb75750600660008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b15611bc757601436033560601c90505b8091505090565b611bf68160016000858152602001908152602001600020600001611aac90919063ffffffff16565b15611c5e57611c03611b53565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b611c8a816001600085815260200190815260200160002060000161212a90919063ffffffff16565b15611cf257611c97611b53565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b611d0a6000801b611d05611b53565b61143b565b611d49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4090613c3f565b60405180910390fd5b565b611d53611adc565b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25881604051611d9c91906126ad565b60405180910390a150565b6000611db6836000018361215a565b60001c905092915050565b6000611de9836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612185565b905092915050565b6000611dff826000016121a8565b9050919050565b611e0e6121b9565b60008060006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa81604051611e5791906126ad565b60405180910390a150565b6000611e6e8383612185565b611ec7578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050611ecc565b600090505b92915050565b600080604183511415611f145760008060006020860151925060408601519150606086015160001a9050611f0887828585612208565b94509450505050611f4e565b604083511415611f45576000806020850151915060408501519050611f3a868383612315565b935093505050611f4e565b60006002915091505b9250929050565b60006004811115611f6957611f68613c5f565b5b816004811115611f7c57611f7b613c5f565b5b1415611f8757612127565b60016004811115611f9b57611f9a613c5f565b5b816004811115611fae57611fad613c5f565b5b1415611fef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe690613cda565b60405180910390fd5b6002600481111561200357612002613c5f565b5b81600481111561201657612015613c5f565b5b1415612057576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161204e90613d46565b60405180910390fd5b6003600481111561206b5761206a613c5f565b5b81600481111561207e5761207d613c5f565b5b14156120bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120b690613dd8565b60405180910390fd5b6004808111156120d2576120d1613c5f565b5b8160048111156120e5576120e4613c5f565b5b1415612126576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211d90613e6a565b60405180910390fd5b5b50565b6000612152836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612374565b905092915050565b600082600001828154811061217257612171613e8a565b5b9060005260206000200154905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b600081600001805490509050919050565b60008054906101000a900460ff16612206576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121fd90613f05565b60405180910390fd5b565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c111561224357600060039150915061230c565b601b8560ff161415801561225b5750601c8560ff1614155b1561226d57600060049150915061230c565b6000600187878787604051600081526020016040526040516122929493929190613f25565b6020604051602081039080840390855afa1580156122b4573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156123035760006001925092505061230c565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c6123589190613f6a565b905061236687828885612208565b935093505050935093915050565b6000808360010160008481526020019081526020016000205490506000811461247c5760006001826123a69190613fc0565b90506000600186600001805490506123be9190613fc0565b905081811461242d5760008660000182815481106123df576123de613e8a565b5b906000526020600020015490508087600001848154811061240357612402613e8a565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b8560000180548061244157612440613ff4565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612482565b60009150505b92915050565b6000604051905090565b600080fd5b600080fd5b600060ff82169050919050565b6124b28161249c565b81146124bd57600080fd5b50565b6000813590506124cf816124a9565b92915050565b600067ffffffffffffffff82169050919050565b6124f2816124d5565b81146124fd57600080fd5b50565b60008135905061250f816124e9565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261253a57612539612515565b5b8235905067ffffffffffffffff8111156125575761255661251a565b5b6020830191508360018202830111156125735761257261251f565b5b9250929050565b6000819050919050565b61258d8161257a565b811461259857600080fd5b50565b6000813590506125aa81612584565b92915050565b600080600080600080600060a0888a0312156125cf576125ce612492565b5b60006125dd8a828b016124c0565b97505060206125ee8a828b01612500565b965050604088013567ffffffffffffffff81111561260f5761260e612497565b5b61261b8a828b01612524565b9550955050606061262e8a828b0161259b565b935050608088013567ffffffffffffffff81111561264f5761264e612497565b5b61265b8a828b01612524565b925092505092959891949750929550565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006126978261266c565b9050919050565b6126a78161268c565b82525050565b60006020820190506126c2600083018461269e565b92915050565b6000819050919050565b6126db816126c8565b81146126e657600080fd5b50565b6000813590506126f8816126d2565b92915050565b6000806040838503121561271557612714612492565b5b6000612723858286016124c0565b9250506020612734858286016126e9565b9150509250929050565b612747816126c8565b82525050565b6000602082019050612762600083018461273e565b92915050565b60006020828403121561277e5761277d612492565b5b600061278c8482850161259b565b91505092915050565b61279e8161257a565b82525050565b60006020820190506127b96000830184612795565b92915050565b6127c88161268c565b81146127d357600080fd5b50565b6000813590506127e5816127bf565b92915050565b6000806040838503121561280257612801612492565b5b60006128108582860161259b565b9250506020612821858286016127d6565b9150509250929050565b60006020828403121561284157612840612492565b5b600061284f848285016124c0565b91505092915050565b612861816124d5565b82525050565b600060208201905061287c6000830184612858565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6128b781612882565b81146128c257600080fd5b50565b6000813590506128d4816128ae565b92915050565b60008060008060008060c087890312156128f7576128f6612492565b5b600061290589828a016127d6565b965050602061291689828a0161259b565b955050604061292789828a016127d6565b945050606061293889828a016128c5565b935050608061294989828a016126e9565b92505060a061295a89828a016128c5565b9150509295509295509295565b60008115159050919050565b61297c81612967565b82525050565b60006020820190506129976000830184612973565b92915050565b6000602082840312156129b3576129b2612492565b5b60006129c1848285016127d6565b91505092915050565b600080600080600080608087890312156129e7576129e6612492565b5b60006129f589828a016124c0565b9650506020612a0689828a0161259b565b955050604087013567ffffffffffffffff811115612a2757612a26612497565b5b612a3389828a01612524565b9450945050606087013567ffffffffffffffff811115612a5657612a55612497565b5b612a6289828a01612524565b92509250509295509295509295565b60008060408385031215612a8857612a87612492565b5b6000612a96858286016127d6565b9250506020612aa7858286016127d6565b9150509250929050565b60008060408385031215612ac857612ac7612492565b5b6000612ad68582860161259b565b9250506020612ae7858286016126e9565b9150509250929050565b612afa8161249c565b82525050565b6000602082019050612b156000830184612af1565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612b6982612b20565b810181811067ffffffffffffffff82111715612b8857612b87612b31565b5b80604052505050565b6000612b9b612488565b9050612ba78282612b60565b919050565b600067ffffffffffffffff821115612bc757612bc6612b31565b5b612bd082612b20565b9050602081019050919050565b82818337600083830152505050565b6000612bff612bfa84612bac565b612b91565b905082815260208101848484011115612c1b57612c1a612b1b565b5b612c26848285612bdd565b509392505050565b600082601f830112612c4357612c42612515565b5b8135612c53848260208601612bec565b91505092915050565b60008060408385031215612c7357612c72612492565b5b6000612c81858286016127d6565b925050602083013567ffffffffffffffff811115612ca257612ca1612497565b5b612cae85828601612c2e565b9150509250929050565b600080600060608486031215612cd157612cd0612492565b5b6000612cdf868287016127d6565b9350506020612cf08682870161259b565b9250506040612d01868287016127d6565b9150509250925092565b612d1481612967565b8114612d1f57600080fd5b50565b600081359050612d3181612d0b565b92915050565b60008060408385031215612d4e57612d4d612492565b5b6000612d5c858286016127d6565b9250506020612d6d85828601612d22565b9150509250929050565b60008060408385031215612d8e57612d8d612492565b5b6000612d9c858286016124c0565b9250506020612dad85828601612500565b9150509250929050565b6000819050919050565b6000612ddc612dd7612dd28461266c565b612db7565b61266c565b9050919050565b6000612dee82612dc1565b9050919050565b6000612e0082612de3565b9050919050565b612e1081612df5565b82525050565b6000602082019050612e2b6000830184612e07565b92915050565b600082825260208201905092915050565b7f4465706f73697420776974682070726f7669646564206e6f6e636520616c726560008201527f6164792065786563757465640000000000000000000000000000000000000000602082015250565b6000612e9e602c83612e31565b9150612ea982612e42565b604082019050919050565b60006020820190508181036000830152612ecd81612e91565b9050919050565b60008160f81b9050919050565b6000612eec82612ed4565b9050919050565b612f04612eff8261249c565b612ee1565b82525050565b60008160c01b9050919050565b6000612f2282612f0a565b9050919050565b612f3a612f35826124d5565b612f17565b82525050565b600081905092915050565b6000612f578385612f40565b9350612f64838584612bdd565b82840190509392505050565b6000819050919050565b612f8b612f868261257a565b612f70565b82525050565b6000612f9d8289612ef3565b600182019150612fad8288612ef3565b600182019150612fbd8287612f29565b600882019150612fce828587612f4b565b9150612fda8284612f7a565b602082019150819050979650505050505050565b7f496e76616c6964206d657373616765207369676e657200000000000000000000600082015250565b6000613024601683612e31565b915061302f82612fee565b602082019050919050565b6000602082019050818103600083015261305381613017565b9050919050565b60008160601b9050919050565b60006130728261305a565b9050919050565b600061308482613067565b9050919050565b61309c6130978261268c565b613079565b82525050565b60006130ae828661308b565b6014820191506130bf828486612f4b565b9150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613106826124d5565b9150613111836124d5565b925082613121576131206130cc565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613166826124d5565b9150613171836124d5565b925082613181576131806130cc565b5b828204905092915050565b600082825260208201905092915050565b60006131a9838561318c565b93506131b6838584612bdd565b6131bf83612b20565b840190509392505050565b60006040820190506131df6000830186612795565b81810360208301526131f281848661319d565b9050949350505050565b60006060820190506132116000830186612af1565b61321e6020830185612858565b61322b6040830184612795565b949350505050565b7f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60008201527f2061646d696e20746f206772616e740000000000000000000000000000000000602082015250565b600061328f602f83612e31565b915061329a82613233565b604082019050919050565b600060208201905081810360008301526132be81613282565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000613321602f83612e31565b915061332c826132c5565b604082019050919050565b6000602082019050818103600083015261335081613314565b9050919050565b61336081612882565b82525050565b600060a08201905061337b6000830188612795565b613388602083018761269e565b6133956040830186613357565b6133a2606083018561273e565b6133af6080830184613357565b9695505050505050565b7f43616e6e6f742072656e6f756e6365206f6e6573656c66000000000000000000600082015250565b60006133ef601783612e31565b91506133fa826133b9565b602082019050919050565b6000602082019050818103600083015261341e816133e2565b9050919050565b7f4d5043206164647265737320697320616c726561647920736574000000000000600082015250565b600061345b601a83612e31565b915061346682613425565b602082019050919050565b6000602082019050818103600083015261348a8161344e565b9050919050565b7f43616e2774206465706f73697420746f2063757272656e7420646f6d61696e00600082015250565b60006134c7601f83612e31565b91506134d282613491565b602082019050919050565b600060208201905081810360008301526134f6816134ba565b9050919050565b7f6e6f2046656548616e646c65722c206d73672e76616c756520213d2030000000600082015250565b6000613533601d83612e31565b915061353e826134fd565b602082019050919050565b6000602082019050818103600083015261356281613526565b9050919050565b600060c08201905061357e600083018b61269e565b61358b602083018a612af1565b6135986040830189612af1565b6135a56060830188612795565b81810360808301526135b881868861319d565b905081810360a08301526135cd81848661319d565b90509998505050505050505050565b7f7265736f757263654944206e6f74206d617070656420746f2068616e646c6572600082015250565b6000613612602083612e31565b915061361d826135dc565b602082019050919050565b6000602082019050818103600083015261364181613605565b9050919050565b6000613653826124d5565b915067ffffffffffffffff82141561366e5761366d61312c565b5b600182019050919050565b600060608201905061368e6000830187612795565b61369b602083018661269e565b81810360408301526136ae81848661319d565b905095945050505050565b60005b838110156136d75780820151818401526020810190506136bc565b838111156136e6576000848401525b50505050565b60006136ff6136fa84612bac565b612b91565b90508281526020810184848401111561371b5761371a612b1b565b5b6137268482856136b9565b509392505050565b600082601f83011261374357613742612515565b5b81516137538482602086016136ec565b91505092915050565b60006020828403121561377257613771612492565b5b600082015167ffffffffffffffff8111156137905761378f612497565b5b61379c8482850161372e565b91505092915050565b600081519050919050565b60006137bb826137a5565b6137c5818561318c565b93506137d58185602086016136b9565b6137de81612b20565b840191505092915050565b600060a0820190506137fe6000830189612af1565b61380b6020830188612795565b6138186040830187612858565b818103606083015261382b81858761319d565b9050818103608083015261383f81846137b0565b9050979650505050505050565b6000613857826126c8565b9150613862836126c8565b925082613872576138716130cc565b5b828206905092915050565b6000613888826126c8565b9150613893836126c8565b9250826138a3576138a26130cc565b5b828204905092915050565b600060208201905081810360008301526138c881846137b0565b905092915050565b60006040820190506138e56000830185612795565b6138f2602083018461269e565b9392505050565b7f4d504320616464726573732063616e2774206265206e756c6c2d61646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000613955602183612e31565b9150613960826138f9565b604082019050919050565b6000602082019050818103600083015261398481613948565b9050919050565b7f4d504320616464726573732063616e2774206265207570646174656400000000600082015250565b60006139c1601c83612e31565b91506139cc8261398b565b602082019050919050565b600060208201905081810360008301526139f0816139b4565b9050919050565b7f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60008201527f2061646d696e20746f207265766f6b6500000000000000000000000000000000602082015250565b6000613a53603083612e31565b9150613a5e826139f7565b604082019050919050565b60006020820190508181036000830152613a8281613a46565b9050919050565b7f446f6573206e6f7420616c6c6f772064656372656d656e7473206f662074686560008201527f206e6f6e63650000000000000000000000000000000000000000000000000000602082015250565b6000613ae5602683612e31565b9150613af082613a89565b604082019050919050565b60006020820190508181036000830152613b1481613ad8565b9050919050565b7f4d50432061646472657373206e6f742073657400000000000000000000000000600082015250565b6000613b51601383612e31565b9150613b5c82613b1b565b602082019050919050565b60006020820190508181036000830152613b8081613b44565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000613bbd601083612e31565b9150613bc882613b87565b602082019050919050565b60006020820190508181036000830152613bec81613bb0565b9050919050565b7f73656e64657220646f65736e277420686176652061646d696e20726f6c650000600082015250565b6000613c29601e83612e31565b9150613c3482613bf3565b602082019050919050565b60006020820190508181036000830152613c5881613c1c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000613cc4601883612e31565b9150613ccf82613c8e565b602082019050919050565b60006020820190508181036000830152613cf381613cb7565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000613d30601f83612e31565b9150613d3b82613cfa565b602082019050919050565b60006020820190508181036000830152613d5f81613d23565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000613dc2602283612e31565b9150613dcd82613d66565b604082019050919050565b60006020820190508181036000830152613df181613db5565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000613e54602283612e31565b9150613e5f82613df8565b604082019050919050565b60006020820190508181036000830152613e8381613e47565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000613eef601483612e31565b9150613efa82613eb9565b602082019050919050565b60006020820190508181036000830152613f1e81613ee2565b9050919050565b6000608082019050613f3a6000830187612795565b613f476020830186612af1565b613f546040830185612795565b613f616060830184612795565b95945050505050565b6000613f75826126c8565b9150613f80836126c8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613fb557613fb461312c565b5b828201905092915050565b6000613fcb826126c8565b9150613fd6836126c8565b925082821015613fe957613fe861312c565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220c210a9edb381ca100a8c6f49995f6caaf0b2474e35ed8ff98e4826cdc3a2177264736f6c634300080b0033"

// DeployBridge deploys a new Ethereum contract, binding an instance of Bridge to it.
func DeployBridge(auth *bind.TransactOpts, backend bind.ContractBackend, domainID uint8) (common.Address, *types.Transaction, *Bridge, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BridgeBin), backend, domainID)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// Bridge is an auto generated Go binding around an Ethereum contract.
type Bridge struct {
	BridgeCaller     // Read-only binding to the contract
	BridgeTransactor // Write-only binding to the contract
	BridgeFilterer   // Log filterer for contract events
}

// BridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeSession struct {
	Contract     *Bridge           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeCallerSession struct {
	Contract *BridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeTransactorSession struct {
	Contract     *BridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeRaw struct {
	Contract *Bridge // Generic contract binding to access the raw methods on
}

// BridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeCallerRaw struct {
	Contract *BridgeCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeTransactorRaw struct {
	Contract *BridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridge creates a new instance of Bridge, bound to a specific deployed contract.
func NewBridge(address common.Address, backend bind.ContractBackend) (*Bridge, error) {
	contract, err := bindBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// NewBridgeCaller creates a new read-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeCaller(address common.Address, caller bind.ContractCaller) (*BridgeCaller, error) {
	contract, err := bindBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCaller{contract: contract}, nil
}

// NewBridgeTransactor creates a new write-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeTransactor, error) {
	contract, err := bindBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactor{contract: contract}, nil
}

// NewBridgeFilterer creates a new log filterer instance of Bridge, bound to a specific deployed contract.
func NewBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeFilterer, error) {
	contract, err := bindBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeFilterer{contract: contract}, nil
}

// bindBridge binds a generic wrapper to an already deployed contract.
func bindBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.BridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Bridge *BridgeCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Bridge *BridgeSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Bridge.Contract.DEFAULTADMINROLE(&_Bridge.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Bridge *BridgeCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Bridge.Contract.DEFAULTADMINROLE(&_Bridge.CallOpts)
}

// MPCAddress is a free data retrieval call binding the contract method 0x059972d2.
//
// Solidity: function _MPCAddress() view returns(address)
func (_Bridge *BridgeCaller) MPCAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_MPCAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MPCAddress is a free data retrieval call binding the contract method 0x059972d2.
//
// Solidity: function _MPCAddress() view returns(address)
func (_Bridge *BridgeSession) MPCAddress() (common.Address, error) {
	return _Bridge.Contract.MPCAddress(&_Bridge.CallOpts)
}

// MPCAddress is a free data retrieval call binding the contract method 0x059972d2.
//
// Solidity: function _MPCAddress() view returns(address)
func (_Bridge *BridgeCallerSession) MPCAddress() (common.Address, error) {
	return _Bridge.Contract.MPCAddress(&_Bridge.CallOpts)
}

// DepositCounts is a free data retrieval call binding the contract method 0x4b0b919d.
//
// Solidity: function _depositCounts(uint8 ) view returns(uint64)
func (_Bridge *BridgeCaller) DepositCounts(opts *bind.CallOpts, arg0 uint8) (uint64, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_depositCounts", arg0)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// DepositCounts is a free data retrieval call binding the contract method 0x4b0b919d.
//
// Solidity: function _depositCounts(uint8 ) view returns(uint64)
func (_Bridge *BridgeSession) DepositCounts(arg0 uint8) (uint64, error) {
	return _Bridge.Contract.DepositCounts(&_Bridge.CallOpts, arg0)
}

// DepositCounts is a free data retrieval call binding the contract method 0x4b0b919d.
//
// Solidity: function _depositCounts(uint8 ) view returns(uint64)
func (_Bridge *BridgeCallerSession) DepositCounts(arg0 uint8) (uint64, error) {
	return _Bridge.Contract.DepositCounts(&_Bridge.CallOpts, arg0)
}

// DomainID is a free data retrieval call binding the contract method 0x9dd694f4.
//
// Solidity: function _domainID() view returns(uint8)
func (_Bridge *BridgeCaller) DomainID(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_domainID")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// DomainID is a free data retrieval call binding the contract method 0x9dd694f4.
//
// Solidity: function _domainID() view returns(uint8)
func (_Bridge *BridgeSession) DomainID() (uint8, error) {
	return _Bridge.Contract.DomainID(&_Bridge.CallOpts)
}

// DomainID is a free data retrieval call binding the contract method 0x9dd694f4.
//
// Solidity: function _domainID() view returns(uint8)
func (_Bridge *BridgeCallerSession) DomainID() (uint8, error) {
	return _Bridge.Contract.DomainID(&_Bridge.CallOpts)
}

// FeeHandler is a free data retrieval call binding the contract method 0xfe4648f4.
//
// Solidity: function _feeHandler() view returns(address)
func (_Bridge *BridgeCaller) FeeHandler(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_feeHandler")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FeeHandler is a free data retrieval call binding the contract method 0xfe4648f4.
//
// Solidity: function _feeHandler() view returns(address)
func (_Bridge *BridgeSession) FeeHandler() (common.Address, error) {
	return _Bridge.Contract.FeeHandler(&_Bridge.CallOpts)
}

// FeeHandler is a free data retrieval call binding the contract method 0xfe4648f4.
//
// Solidity: function _feeHandler() view returns(address)
func (_Bridge *BridgeCallerSession) FeeHandler() (common.Address, error) {
	return _Bridge.Contract.FeeHandler(&_Bridge.CallOpts)
}

// ResourceIDToHandlerAddress is a free data retrieval call binding the contract method 0x84db809f.
//
// Solidity: function _resourceIDToHandlerAddress(bytes32 ) view returns(address)
func (_Bridge *BridgeCaller) ResourceIDToHandlerAddress(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_resourceIDToHandlerAddress", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ResourceIDToHandlerAddress is a free data retrieval call binding the contract method 0x84db809f.
//
// Solidity: function _resourceIDToHandlerAddress(bytes32 ) view returns(address)
func (_Bridge *BridgeSession) ResourceIDToHandlerAddress(arg0 [32]byte) (common.Address, error) {
	return _Bridge.Contract.ResourceIDToHandlerAddress(&_Bridge.CallOpts, arg0)
}

// ResourceIDToHandlerAddress is a free data retrieval call binding the contract method 0x84db809f.
//
// Solidity: function _resourceIDToHandlerAddress(bytes32 ) view returns(address)
func (_Bridge *BridgeCallerSession) ResourceIDToHandlerAddress(arg0 [32]byte) (common.Address, error) {
	return _Bridge.Contract.ResourceIDToHandlerAddress(&_Bridge.CallOpts, arg0)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Bridge *BridgeCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Bridge *BridgeSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Bridge.Contract.GetRoleAdmin(&_Bridge.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Bridge *BridgeCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Bridge.Contract.GetRoleAdmin(&_Bridge.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Bridge *BridgeCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Bridge *BridgeSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _Bridge.Contract.GetRoleMember(&_Bridge.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Bridge *BridgeCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _Bridge.Contract.GetRoleMember(&_Bridge.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Bridge *BridgeCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Bridge *BridgeSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _Bridge.Contract.GetRoleMemberCount(&_Bridge.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Bridge *BridgeCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _Bridge.Contract.GetRoleMemberCount(&_Bridge.CallOpts, role)
}

// GetRoleMemberIndex is a free data retrieval call binding the contract method 0x4e0df3f6.
//
// Solidity: function getRoleMemberIndex(bytes32 role, address account) view returns(uint256)
func (_Bridge *BridgeCaller) GetRoleMemberIndex(opts *bind.CallOpts, role [32]byte, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getRoleMemberIndex", role, account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberIndex is a free data retrieval call binding the contract method 0x4e0df3f6.
//
// Solidity: function getRoleMemberIndex(bytes32 role, address account) view returns(uint256)
func (_Bridge *BridgeSession) GetRoleMemberIndex(role [32]byte, account common.Address) (*big.Int, error) {
	return _Bridge.Contract.GetRoleMemberIndex(&_Bridge.CallOpts, role, account)
}

// GetRoleMemberIndex is a free data retrieval call binding the contract method 0x4e0df3f6.
//
// Solidity: function getRoleMemberIndex(bytes32 role, address account) view returns(uint256)
func (_Bridge *BridgeCallerSession) GetRoleMemberIndex(role [32]byte, account common.Address) (*big.Int, error) {
	return _Bridge.Contract.GetRoleMemberIndex(&_Bridge.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Bridge *BridgeCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Bridge *BridgeSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Bridge.Contract.HasRole(&_Bridge.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Bridge *BridgeCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Bridge.Contract.HasRole(&_Bridge.CallOpts, role, account)
}

// IsProposalExecuted is a free data retrieval call binding the contract method 0x9ae0bf45.
//
// Solidity: function isProposalExecuted(uint8 domainID, uint256 depositNonce) view returns(bool)
func (_Bridge *BridgeCaller) IsProposalExecuted(opts *bind.CallOpts, domainID uint8, depositNonce *big.Int) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "isProposalExecuted", domainID, depositNonce)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsProposalExecuted is a free data retrieval call binding the contract method 0x9ae0bf45.
//
// Solidity: function isProposalExecuted(uint8 domainID, uint256 depositNonce) view returns(bool)
func (_Bridge *BridgeSession) IsProposalExecuted(domainID uint8, depositNonce *big.Int) (bool, error) {
	return _Bridge.Contract.IsProposalExecuted(&_Bridge.CallOpts, domainID, depositNonce)
}

// IsProposalExecuted is a free data retrieval call binding the contract method 0x9ae0bf45.
//
// Solidity: function isProposalExecuted(uint8 domainID, uint256 depositNonce) view returns(bool)
func (_Bridge *BridgeCallerSession) IsProposalExecuted(domainID uint8, depositNonce *big.Int) (bool, error) {
	return _Bridge.Contract.IsProposalExecuted(&_Bridge.CallOpts, domainID, depositNonce)
}

// IsValidForwarder is a free data retrieval call binding the contract method 0xf8c39e44.
//
// Solidity: function isValidForwarder(address ) view returns(bool)
func (_Bridge *BridgeCaller) IsValidForwarder(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "isValidForwarder", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidForwarder is a free data retrieval call binding the contract method 0xf8c39e44.
//
// Solidity: function isValidForwarder(address ) view returns(bool)
func (_Bridge *BridgeSession) IsValidForwarder(arg0 common.Address) (bool, error) {
	return _Bridge.Contract.IsValidForwarder(&_Bridge.CallOpts, arg0)
}

// IsValidForwarder is a free data retrieval call binding the contract method 0xf8c39e44.
//
// Solidity: function isValidForwarder(address ) view returns(bool)
func (_Bridge *BridgeCallerSession) IsValidForwarder(arg0 common.Address) (bool, error) {
	return _Bridge.Contract.IsValidForwarder(&_Bridge.CallOpts, arg0)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Bridge *BridgeCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Bridge *BridgeSession) Paused() (bool, error) {
	return _Bridge.Contract.Paused(&_Bridge.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Bridge *BridgeCallerSession) Paused() (bool, error) {
	return _Bridge.Contract.Paused(&_Bridge.CallOpts)
}

// UsedNonces is a free data retrieval call binding the contract method 0x08a64104.
//
// Solidity: function usedNonces(uint8 , uint256 ) view returns(uint256)
func (_Bridge *BridgeCaller) UsedNonces(opts *bind.CallOpts, arg0 uint8, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "usedNonces", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UsedNonces is a free data retrieval call binding the contract method 0x08a64104.
//
// Solidity: function usedNonces(uint8 , uint256 ) view returns(uint256)
func (_Bridge *BridgeSession) UsedNonces(arg0 uint8, arg1 *big.Int) (*big.Int, error) {
	return _Bridge.Contract.UsedNonces(&_Bridge.CallOpts, arg0, arg1)
}

// UsedNonces is a free data retrieval call binding the contract method 0x08a64104.
//
// Solidity: function usedNonces(uint8 , uint256 ) view returns(uint256)
func (_Bridge *BridgeCallerSession) UsedNonces(arg0 uint8, arg1 *big.Int) (*big.Int, error) {
	return _Bridge.Contract.UsedNonces(&_Bridge.CallOpts, arg0, arg1)
}

// AdminChangeFeeHandler is a paid mutator transaction binding the contract method 0x8b63aebf.
//
// Solidity: function adminChangeFeeHandler(address newFeeHandler) returns()
func (_Bridge *BridgeTransactor) AdminChangeFeeHandler(opts *bind.TransactOpts, newFeeHandler common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminChangeFeeHandler", newFeeHandler)
}

// AdminChangeFeeHandler is a paid mutator transaction binding the contract method 0x8b63aebf.
//
// Solidity: function adminChangeFeeHandler(address newFeeHandler) returns()
func (_Bridge *BridgeSession) AdminChangeFeeHandler(newFeeHandler common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminChangeFeeHandler(&_Bridge.TransactOpts, newFeeHandler)
}

// AdminChangeFeeHandler is a paid mutator transaction binding the contract method 0x8b63aebf.
//
// Solidity: function adminChangeFeeHandler(address newFeeHandler) returns()
func (_Bridge *BridgeTransactorSession) AdminChangeFeeHandler(newFeeHandler common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminChangeFeeHandler(&_Bridge.TransactOpts, newFeeHandler)
}

// AdminPauseTransfers is a paid mutator transaction binding the contract method 0x80ae1c28.
//
// Solidity: function adminPauseTransfers() returns()
func (_Bridge *BridgeTransactor) AdminPauseTransfers(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminPauseTransfers")
}

// AdminPauseTransfers is a paid mutator transaction binding the contract method 0x80ae1c28.
//
// Solidity: function adminPauseTransfers() returns()
func (_Bridge *BridgeSession) AdminPauseTransfers() (*types.Transaction, error) {
	return _Bridge.Contract.AdminPauseTransfers(&_Bridge.TransactOpts)
}

// AdminPauseTransfers is a paid mutator transaction binding the contract method 0x80ae1c28.
//
// Solidity: function adminPauseTransfers() returns()
func (_Bridge *BridgeTransactorSession) AdminPauseTransfers() (*types.Transaction, error) {
	return _Bridge.Contract.AdminPauseTransfers(&_Bridge.TransactOpts)
}

// AdminSetBurnable is a paid mutator transaction binding the contract method 0x8c0c2631.
//
// Solidity: function adminSetBurnable(address handlerAddress, address tokenAddress) returns()
func (_Bridge *BridgeTransactor) AdminSetBurnable(opts *bind.TransactOpts, handlerAddress common.Address, tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminSetBurnable", handlerAddress, tokenAddress)
}

// AdminSetBurnable is a paid mutator transaction binding the contract method 0x8c0c2631.
//
// Solidity: function adminSetBurnable(address handlerAddress, address tokenAddress) returns()
func (_Bridge *BridgeSession) AdminSetBurnable(handlerAddress common.Address, tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetBurnable(&_Bridge.TransactOpts, handlerAddress, tokenAddress)
}

// AdminSetBurnable is a paid mutator transaction binding the contract method 0x8c0c2631.
//
// Solidity: function adminSetBurnable(address handlerAddress, address tokenAddress) returns()
func (_Bridge *BridgeTransactorSession) AdminSetBurnable(handlerAddress common.Address, tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetBurnable(&_Bridge.TransactOpts, handlerAddress, tokenAddress)
}

// AdminSetDepositNonce is a paid mutator transaction binding the contract method 0xedc20c3c.
//
// Solidity: function adminSetDepositNonce(uint8 domainID, uint64 nonce) returns()
func (_Bridge *BridgeTransactor) AdminSetDepositNonce(opts *bind.TransactOpts, domainID uint8, nonce uint64) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminSetDepositNonce", domainID, nonce)
}

// AdminSetDepositNonce is a paid mutator transaction binding the contract method 0xedc20c3c.
//
// Solidity: function adminSetDepositNonce(uint8 domainID, uint64 nonce) returns()
func (_Bridge *BridgeSession) AdminSetDepositNonce(domainID uint8, nonce uint64) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetDepositNonce(&_Bridge.TransactOpts, domainID, nonce)
}

// AdminSetDepositNonce is a paid mutator transaction binding the contract method 0xedc20c3c.
//
// Solidity: function adminSetDepositNonce(uint8 domainID, uint64 nonce) returns()
func (_Bridge *BridgeTransactorSession) AdminSetDepositNonce(domainID uint8, nonce uint64) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetDepositNonce(&_Bridge.TransactOpts, domainID, nonce)
}

// AdminSetForwarder is a paid mutator transaction binding the contract method 0xd15ef64e.
//
// Solidity: function adminSetForwarder(address forwarder, bool valid) returns()
func (_Bridge *BridgeTransactor) AdminSetForwarder(opts *bind.TransactOpts, forwarder common.Address, valid bool) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminSetForwarder", forwarder, valid)
}

// AdminSetForwarder is a paid mutator transaction binding the contract method 0xd15ef64e.
//
// Solidity: function adminSetForwarder(address forwarder, bool valid) returns()
func (_Bridge *BridgeSession) AdminSetForwarder(forwarder common.Address, valid bool) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetForwarder(&_Bridge.TransactOpts, forwarder, valid)
}

// AdminSetForwarder is a paid mutator transaction binding the contract method 0xd15ef64e.
//
// Solidity: function adminSetForwarder(address forwarder, bool valid) returns()
func (_Bridge *BridgeTransactorSession) AdminSetForwarder(forwarder common.Address, valid bool) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetForwarder(&_Bridge.TransactOpts, forwarder, valid)
}

// AdminSetGenericResource is a paid mutator transaction binding the contract method 0x5a1ad87c.
//
// Solidity: function adminSetGenericResource(address handlerAddress, bytes32 resourceID, address contractAddress, bytes4 depositFunctionSig, uint256 depositFunctionDepositerOffset, bytes4 executeFunctionSig) returns()
func (_Bridge *BridgeTransactor) AdminSetGenericResource(opts *bind.TransactOpts, handlerAddress common.Address, resourceID [32]byte, contractAddress common.Address, depositFunctionSig [4]byte, depositFunctionDepositerOffset *big.Int, executeFunctionSig [4]byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminSetGenericResource", handlerAddress, resourceID, contractAddress, depositFunctionSig, depositFunctionDepositerOffset, executeFunctionSig)
}

// AdminSetGenericResource is a paid mutator transaction binding the contract method 0x5a1ad87c.
//
// Solidity: function adminSetGenericResource(address handlerAddress, bytes32 resourceID, address contractAddress, bytes4 depositFunctionSig, uint256 depositFunctionDepositerOffset, bytes4 executeFunctionSig) returns()
func (_Bridge *BridgeSession) AdminSetGenericResource(handlerAddress common.Address, resourceID [32]byte, contractAddress common.Address, depositFunctionSig [4]byte, depositFunctionDepositerOffset *big.Int, executeFunctionSig [4]byte) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetGenericResource(&_Bridge.TransactOpts, handlerAddress, resourceID, contractAddress, depositFunctionSig, depositFunctionDepositerOffset, executeFunctionSig)
}

// AdminSetGenericResource is a paid mutator transaction binding the contract method 0x5a1ad87c.
//
// Solidity: function adminSetGenericResource(address handlerAddress, bytes32 resourceID, address contractAddress, bytes4 depositFunctionSig, uint256 depositFunctionDepositerOffset, bytes4 executeFunctionSig) returns()
func (_Bridge *BridgeTransactorSession) AdminSetGenericResource(handlerAddress common.Address, resourceID [32]byte, contractAddress common.Address, depositFunctionSig [4]byte, depositFunctionDepositerOffset *big.Int, executeFunctionSig [4]byte) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetGenericResource(&_Bridge.TransactOpts, handlerAddress, resourceID, contractAddress, depositFunctionSig, depositFunctionDepositerOffset, executeFunctionSig)
}

// AdminSetResource is a paid mutator transaction binding the contract method 0xcb10f215.
//
// Solidity: function adminSetResource(address handlerAddress, bytes32 resourceID, address tokenAddress) returns()
func (_Bridge *BridgeTransactor) AdminSetResource(opts *bind.TransactOpts, handlerAddress common.Address, resourceID [32]byte, tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminSetResource", handlerAddress, resourceID, tokenAddress)
}

// AdminSetResource is a paid mutator transaction binding the contract method 0xcb10f215.
//
// Solidity: function adminSetResource(address handlerAddress, bytes32 resourceID, address tokenAddress) returns()
func (_Bridge *BridgeSession) AdminSetResource(handlerAddress common.Address, resourceID [32]byte, tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetResource(&_Bridge.TransactOpts, handlerAddress, resourceID, tokenAddress)
}

// AdminSetResource is a paid mutator transaction binding the contract method 0xcb10f215.
//
// Solidity: function adminSetResource(address handlerAddress, bytes32 resourceID, address tokenAddress) returns()
func (_Bridge *BridgeTransactorSession) AdminSetResource(handlerAddress common.Address, resourceID [32]byte, tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetResource(&_Bridge.TransactOpts, handlerAddress, resourceID, tokenAddress)
}

// AdminUnpauseTransfers is a paid mutator transaction binding the contract method 0xffaac0eb.
//
// Solidity: function adminUnpauseTransfers() returns()
func (_Bridge *BridgeTransactor) AdminUnpauseTransfers(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminUnpauseTransfers")
}

// AdminUnpauseTransfers is a paid mutator transaction binding the contract method 0xffaac0eb.
//
// Solidity: function adminUnpauseTransfers() returns()
func (_Bridge *BridgeSession) AdminUnpauseTransfers() (*types.Transaction, error) {
	return _Bridge.Contract.AdminUnpauseTransfers(&_Bridge.TransactOpts)
}

// AdminUnpauseTransfers is a paid mutator transaction binding the contract method 0xffaac0eb.
//
// Solidity: function adminUnpauseTransfers() returns()
func (_Bridge *BridgeTransactorSession) AdminUnpauseTransfers() (*types.Transaction, error) {
	return _Bridge.Contract.AdminUnpauseTransfers(&_Bridge.TransactOpts)
}

// AdminWithdraw is a paid mutator transaction binding the contract method 0xbd2a1820.
//
// Solidity: function adminWithdraw(address handlerAddress, bytes data) returns()
func (_Bridge *BridgeTransactor) AdminWithdraw(opts *bind.TransactOpts, handlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminWithdraw", handlerAddress, data)
}

// AdminWithdraw is a paid mutator transaction binding the contract method 0xbd2a1820.
//
// Solidity: function adminWithdraw(address handlerAddress, bytes data) returns()
func (_Bridge *BridgeSession) AdminWithdraw(handlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.AdminWithdraw(&_Bridge.TransactOpts, handlerAddress, data)
}

// AdminWithdraw is a paid mutator transaction binding the contract method 0xbd2a1820.
//
// Solidity: function adminWithdraw(address handlerAddress, bytes data) returns()
func (_Bridge *BridgeTransactorSession) AdminWithdraw(handlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.AdminWithdraw(&_Bridge.TransactOpts, handlerAddress, data)
}

// Deposit is a paid mutator transaction binding the contract method 0x73c45c98.
//
// Solidity: function deposit(uint8 destinationDomainID, bytes32 resourceID, bytes depositData, bytes feeData) payable returns()
func (_Bridge *BridgeTransactor) Deposit(opts *bind.TransactOpts, destinationDomainID uint8, resourceID [32]byte, depositData []byte, feeData []byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "deposit", destinationDomainID, resourceID, depositData, feeData)
}

// Deposit is a paid mutator transaction binding the contract method 0x73c45c98.
//
// Solidity: function deposit(uint8 destinationDomainID, bytes32 resourceID, bytes depositData, bytes feeData) payable returns()
func (_Bridge *BridgeSession) Deposit(destinationDomainID uint8, resourceID [32]byte, depositData []byte, feeData []byte) (*types.Transaction, error) {
	return _Bridge.Contract.Deposit(&_Bridge.TransactOpts, destinationDomainID, resourceID, depositData, feeData)
}

// Deposit is a paid mutator transaction binding the contract method 0x73c45c98.
//
// Solidity: function deposit(uint8 destinationDomainID, bytes32 resourceID, bytes depositData, bytes feeData) payable returns()
func (_Bridge *BridgeTransactorSession) Deposit(destinationDomainID uint8, resourceID [32]byte, depositData []byte, feeData []byte) (*types.Transaction, error) {
	return _Bridge.Contract.Deposit(&_Bridge.TransactOpts, destinationDomainID, resourceID, depositData, feeData)
}

// EndKeygen is a paid mutator transaction binding the contract method 0xd2e5fae9.
//
// Solidity: function endKeygen(address MPCAddress) returns()
func (_Bridge *BridgeTransactor) EndKeygen(opts *bind.TransactOpts, MPCAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "endKeygen", MPCAddress)
}

// EndKeygen is a paid mutator transaction binding the contract method 0xd2e5fae9.
//
// Solidity: function endKeygen(address MPCAddress) returns()
func (_Bridge *BridgeSession) EndKeygen(MPCAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.EndKeygen(&_Bridge.TransactOpts, MPCAddress)
}

// EndKeygen is a paid mutator transaction binding the contract method 0xd2e5fae9.
//
// Solidity: function endKeygen(address MPCAddress) returns()
func (_Bridge *BridgeTransactorSession) EndKeygen(MPCAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.EndKeygen(&_Bridge.TransactOpts, MPCAddress)
}

// ExecuteProposal is a paid mutator transaction binding the contract method 0x0395974c.
//
// Solidity: function executeProposal(uint8 originDomainID, uint64 depositNonce, bytes data, bytes32 resourceID, bytes signature) returns()
func (_Bridge *BridgeTransactor) ExecuteProposal(opts *bind.TransactOpts, originDomainID uint8, depositNonce uint64, data []byte, resourceID [32]byte, signature []byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "executeProposal", originDomainID, depositNonce, data, resourceID, signature)
}

// ExecuteProposal is a paid mutator transaction binding the contract method 0x0395974c.
//
// Solidity: function executeProposal(uint8 originDomainID, uint64 depositNonce, bytes data, bytes32 resourceID, bytes signature) returns()
func (_Bridge *BridgeSession) ExecuteProposal(originDomainID uint8, depositNonce uint64, data []byte, resourceID [32]byte, signature []byte) (*types.Transaction, error) {
	return _Bridge.Contract.ExecuteProposal(&_Bridge.TransactOpts, originDomainID, depositNonce, data, resourceID, signature)
}

// ExecuteProposal is a paid mutator transaction binding the contract method 0x0395974c.
//
// Solidity: function executeProposal(uint8 originDomainID, uint64 depositNonce, bytes data, bytes32 resourceID, bytes signature) returns()
func (_Bridge *BridgeTransactorSession) ExecuteProposal(originDomainID uint8, depositNonce uint64, data []byte, resourceID [32]byte, signature []byte) (*types.Transaction, error) {
	return _Bridge.Contract.ExecuteProposal(&_Bridge.TransactOpts, originDomainID, depositNonce, data, resourceID, signature)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Bridge *BridgeTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Bridge *BridgeSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.GrantRole(&_Bridge.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Bridge *BridgeTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.GrantRole(&_Bridge.TransactOpts, role, account)
}

// RefreshKey is a paid mutator transaction binding the contract method 0xf5f63b39.
//
// Solidity: function refreshKey() returns()
func (_Bridge *BridgeTransactor) RefreshKey(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "refreshKey")
}

// RefreshKey is a paid mutator transaction binding the contract method 0xf5f63b39.
//
// Solidity: function refreshKey() returns()
func (_Bridge *BridgeSession) RefreshKey() (*types.Transaction, error) {
	return _Bridge.Contract.RefreshKey(&_Bridge.TransactOpts)
}

// RefreshKey is a paid mutator transaction binding the contract method 0xf5f63b39.
//
// Solidity: function refreshKey() returns()
func (_Bridge *BridgeTransactorSession) RefreshKey() (*types.Transaction, error) {
	return _Bridge.Contract.RefreshKey(&_Bridge.TransactOpts)
}

// RenounceAdmin is a paid mutator transaction binding the contract method 0x5e1fab0f.
//
// Solidity: function renounceAdmin(address newAdmin) returns()
func (_Bridge *BridgeTransactor) RenounceAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "renounceAdmin", newAdmin)
}

// RenounceAdmin is a paid mutator transaction binding the contract method 0x5e1fab0f.
//
// Solidity: function renounceAdmin(address newAdmin) returns()
func (_Bridge *BridgeSession) RenounceAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.RenounceAdmin(&_Bridge.TransactOpts, newAdmin)
}

// RenounceAdmin is a paid mutator transaction binding the contract method 0x5e1fab0f.
//
// Solidity: function renounceAdmin(address newAdmin) returns()
func (_Bridge *BridgeTransactorSession) RenounceAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.RenounceAdmin(&_Bridge.TransactOpts, newAdmin)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Bridge *BridgeTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Bridge *BridgeSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.RenounceRole(&_Bridge.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Bridge *BridgeTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.RenounceRole(&_Bridge.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Bridge *BridgeTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Bridge *BridgeSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.RevokeRole(&_Bridge.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Bridge *BridgeTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.RevokeRole(&_Bridge.TransactOpts, role, account)
}

// StartKeygen is a paid mutator transaction binding the contract method 0x6ba6db6b.
//
// Solidity: function startKeygen() returns()
func (_Bridge *BridgeTransactor) StartKeygen(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "startKeygen")
}

// StartKeygen is a paid mutator transaction binding the contract method 0x6ba6db6b.
//
// Solidity: function startKeygen() returns()
func (_Bridge *BridgeSession) StartKeygen() (*types.Transaction, error) {
	return _Bridge.Contract.StartKeygen(&_Bridge.TransactOpts)
}

// StartKeygen is a paid mutator transaction binding the contract method 0x6ba6db6b.
//
// Solidity: function startKeygen() returns()
func (_Bridge *BridgeTransactorSession) StartKeygen() (*types.Transaction, error) {
	return _Bridge.Contract.StartKeygen(&_Bridge.TransactOpts)
}

// BridgeDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Bridge contract.
type BridgeDepositIterator struct {
	Event *BridgeDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeDeposit represents a Deposit event raised by the Bridge contract.
type BridgeDeposit struct {
	DestinationDomainID uint8
	ResourceID          [32]byte
	DepositNonce        uint64
	User                common.Address
	Data                []byte
	HandlerResponse     []byte
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x17bc3181e17a9620a479c24e6c606e474ba84fc036877b768926872e8cd0e11f.
//
// Solidity: event Deposit(uint8 destinationDomainID, bytes32 resourceID, uint64 depositNonce, address indexed user, bytes data, bytes handlerResponse)
func (_Bridge *BridgeFilterer) FilterDeposit(opts *bind.FilterOpts, user []common.Address) (*BridgeDepositIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "Deposit", userRule)
	if err != nil {
		return nil, err
	}
	return &BridgeDepositIterator{contract: _Bridge.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x17bc3181e17a9620a479c24e6c606e474ba84fc036877b768926872e8cd0e11f.
//
// Solidity: event Deposit(uint8 destinationDomainID, bytes32 resourceID, uint64 depositNonce, address indexed user, bytes data, bytes handlerResponse)
func (_Bridge *BridgeFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *BridgeDeposit, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "Deposit", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeDeposit)
				if err := _Bridge.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x17bc3181e17a9620a479c24e6c606e474ba84fc036877b768926872e8cd0e11f.
//
// Solidity: event Deposit(uint8 destinationDomainID, bytes32 resourceID, uint64 depositNonce, address indexed user, bytes data, bytes handlerResponse)
func (_Bridge *BridgeFilterer) ParseDeposit(log types.Log) (*BridgeDeposit, error) {
	event := new(BridgeDeposit)
	if err := _Bridge.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeEndKeygenIterator is returned from FilterEndKeygen and is used to iterate over the raw logs and unpacked data for EndKeygen events raised by the Bridge contract.
type BridgeEndKeygenIterator struct {
	Event *BridgeEndKeygen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeEndKeygenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeEndKeygen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeEndKeygen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeEndKeygenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeEndKeygenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeEndKeygen represents a EndKeygen event raised by the Bridge contract.
type BridgeEndKeygen struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEndKeygen is a free log retrieval operation binding the contract event 0x4187686ceef7b541a1f224d48d4cded8f2c535e0e58ac0f0514071b1de3dad57.
//
// Solidity: event EndKeygen()
func (_Bridge *BridgeFilterer) FilterEndKeygen(opts *bind.FilterOpts) (*BridgeEndKeygenIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "EndKeygen")
	if err != nil {
		return nil, err
	}
	return &BridgeEndKeygenIterator{contract: _Bridge.contract, event: "EndKeygen", logs: logs, sub: sub}, nil
}

// WatchEndKeygen is a free log subscription operation binding the contract event 0x4187686ceef7b541a1f224d48d4cded8f2c535e0e58ac0f0514071b1de3dad57.
//
// Solidity: event EndKeygen()
func (_Bridge *BridgeFilterer) WatchEndKeygen(opts *bind.WatchOpts, sink chan<- *BridgeEndKeygen) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "EndKeygen")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeEndKeygen)
				if err := _Bridge.contract.UnpackLog(event, "EndKeygen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEndKeygen is a log parse operation binding the contract event 0x4187686ceef7b541a1f224d48d4cded8f2c535e0e58ac0f0514071b1de3dad57.
//
// Solidity: event EndKeygen()
func (_Bridge *BridgeFilterer) ParseEndKeygen(log types.Log) (*BridgeEndKeygen, error) {
	event := new(BridgeEndKeygen)
	if err := _Bridge.contract.UnpackLog(event, "EndKeygen", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeFailedHandlerExecutionIterator is returned from FilterFailedHandlerExecution and is used to iterate over the raw logs and unpacked data for FailedHandlerExecution events raised by the Bridge contract.
type BridgeFailedHandlerExecutionIterator struct {
	Event *BridgeFailedHandlerExecution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeFailedHandlerExecutionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeFailedHandlerExecution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeFailedHandlerExecution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeFailedHandlerExecutionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeFailedHandlerExecutionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeFailedHandlerExecution represents a FailedHandlerExecution event raised by the Bridge contract.
type BridgeFailedHandlerExecution struct {
	LowLevelData []byte
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterFailedHandlerExecution is a free log retrieval operation binding the contract event 0xbd37c1f0d53bb2f33fe4c2104de272fcdeb4d2fef3acdbf1e4ddc3d6833ca376.
//
// Solidity: event FailedHandlerExecution(bytes lowLevelData)
func (_Bridge *BridgeFilterer) FilterFailedHandlerExecution(opts *bind.FilterOpts) (*BridgeFailedHandlerExecutionIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "FailedHandlerExecution")
	if err != nil {
		return nil, err
	}
	return &BridgeFailedHandlerExecutionIterator{contract: _Bridge.contract, event: "FailedHandlerExecution", logs: logs, sub: sub}, nil
}

// WatchFailedHandlerExecution is a free log subscription operation binding the contract event 0xbd37c1f0d53bb2f33fe4c2104de272fcdeb4d2fef3acdbf1e4ddc3d6833ca376.
//
// Solidity: event FailedHandlerExecution(bytes lowLevelData)
func (_Bridge *BridgeFilterer) WatchFailedHandlerExecution(opts *bind.WatchOpts, sink chan<- *BridgeFailedHandlerExecution) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "FailedHandlerExecution")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeFailedHandlerExecution)
				if err := _Bridge.contract.UnpackLog(event, "FailedHandlerExecution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFailedHandlerExecution is a log parse operation binding the contract event 0xbd37c1f0d53bb2f33fe4c2104de272fcdeb4d2fef3acdbf1e4ddc3d6833ca376.
//
// Solidity: event FailedHandlerExecution(bytes lowLevelData)
func (_Bridge *BridgeFilterer) ParseFailedHandlerExecution(log types.Log) (*BridgeFailedHandlerExecution, error) {
	event := new(BridgeFailedHandlerExecution)
	if err := _Bridge.contract.UnpackLog(event, "FailedHandlerExecution", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeFeeHandlerChangedIterator is returned from FilterFeeHandlerChanged and is used to iterate over the raw logs and unpacked data for FeeHandlerChanged events raised by the Bridge contract.
type BridgeFeeHandlerChangedIterator struct {
	Event *BridgeFeeHandlerChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeFeeHandlerChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeFeeHandlerChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeFeeHandlerChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeFeeHandlerChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeFeeHandlerChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeFeeHandlerChanged represents a FeeHandlerChanged event raised by the Bridge contract.
type BridgeFeeHandlerChanged struct {
	NewFeeHandler common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterFeeHandlerChanged is a free log retrieval operation binding the contract event 0x729170bd142e4965055b26a285faeedf03baf2b915bfc5a7c75d24b45815ff2c.
//
// Solidity: event FeeHandlerChanged(address newFeeHandler)
func (_Bridge *BridgeFilterer) FilterFeeHandlerChanged(opts *bind.FilterOpts) (*BridgeFeeHandlerChangedIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "FeeHandlerChanged")
	if err != nil {
		return nil, err
	}
	return &BridgeFeeHandlerChangedIterator{contract: _Bridge.contract, event: "FeeHandlerChanged", logs: logs, sub: sub}, nil
}

// WatchFeeHandlerChanged is a free log subscription operation binding the contract event 0x729170bd142e4965055b26a285faeedf03baf2b915bfc5a7c75d24b45815ff2c.
//
// Solidity: event FeeHandlerChanged(address newFeeHandler)
func (_Bridge *BridgeFilterer) WatchFeeHandlerChanged(opts *bind.WatchOpts, sink chan<- *BridgeFeeHandlerChanged) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "FeeHandlerChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeFeeHandlerChanged)
				if err := _Bridge.contract.UnpackLog(event, "FeeHandlerChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFeeHandlerChanged is a log parse operation binding the contract event 0x729170bd142e4965055b26a285faeedf03baf2b915bfc5a7c75d24b45815ff2c.
//
// Solidity: event FeeHandlerChanged(address newFeeHandler)
func (_Bridge *BridgeFilterer) ParseFeeHandlerChanged(log types.Log) (*BridgeFeeHandlerChanged, error) {
	event := new(BridgeFeeHandlerChanged)
	if err := _Bridge.contract.UnpackLog(event, "FeeHandlerChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeKeyRefreshIterator is returned from FilterKeyRefresh and is used to iterate over the raw logs and unpacked data for KeyRefresh events raised by the Bridge contract.
type BridgeKeyRefreshIterator struct {
	Event *BridgeKeyRefresh // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeKeyRefreshIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeKeyRefresh)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeKeyRefresh)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeKeyRefreshIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeKeyRefreshIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeKeyRefresh represents a KeyRefresh event raised by the Bridge contract.
type BridgeKeyRefresh struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterKeyRefresh is a free log retrieval operation binding the contract event 0x034a03238f3c0f2cad22894b0fa8810b6ffcf678a2560e54a7e41b4e9cebd02e.
//
// Solidity: event KeyRefresh()
func (_Bridge *BridgeFilterer) FilterKeyRefresh(opts *bind.FilterOpts) (*BridgeKeyRefreshIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "KeyRefresh")
	if err != nil {
		return nil, err
	}
	return &BridgeKeyRefreshIterator{contract: _Bridge.contract, event: "KeyRefresh", logs: logs, sub: sub}, nil
}

// WatchKeyRefresh is a free log subscription operation binding the contract event 0x034a03238f3c0f2cad22894b0fa8810b6ffcf678a2560e54a7e41b4e9cebd02e.
//
// Solidity: event KeyRefresh()
func (_Bridge *BridgeFilterer) WatchKeyRefresh(opts *bind.WatchOpts, sink chan<- *BridgeKeyRefresh) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "KeyRefresh")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeKeyRefresh)
				if err := _Bridge.contract.UnpackLog(event, "KeyRefresh", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyRefresh is a log parse operation binding the contract event 0x034a03238f3c0f2cad22894b0fa8810b6ffcf678a2560e54a7e41b4e9cebd02e.
//
// Solidity: event KeyRefresh()
func (_Bridge *BridgeFilterer) ParseKeyRefresh(log types.Log) (*BridgeKeyRefresh, error) {
	event := new(BridgeKeyRefresh)
	if err := _Bridge.contract.UnpackLog(event, "KeyRefresh", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Bridge contract.
type BridgePausedIterator struct {
	Event *BridgePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgePaused represents a Paused event raised by the Bridge contract.
type BridgePaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Bridge *BridgeFilterer) FilterPaused(opts *bind.FilterOpts) (*BridgePausedIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &BridgePausedIterator{contract: _Bridge.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Bridge *BridgeFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *BridgePaused) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgePaused)
				if err := _Bridge.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Bridge *BridgeFilterer) ParsePaused(log types.Log) (*BridgePaused, error) {
	event := new(BridgePaused)
	if err := _Bridge.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeProposalExecutionIterator is returned from FilterProposalExecution and is used to iterate over the raw logs and unpacked data for ProposalExecution events raised by the Bridge contract.
type BridgeProposalExecutionIterator struct {
	Event *BridgeProposalExecution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeProposalExecutionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeProposalExecution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeProposalExecution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeProposalExecutionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeProposalExecutionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeProposalExecution represents a ProposalExecution event raised by the Bridge contract.
type BridgeProposalExecution struct {
	OriginDomainID uint8
	DepositNonce   uint64
	DataHash       [32]byte
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterProposalExecution is a free log retrieval operation binding the contract event 0x6018c584b8d99bafeda249b2429f5907d830e792222070c1b3a94aa76ee71677.
//
// Solidity: event ProposalExecution(uint8 originDomainID, uint64 depositNonce, bytes32 dataHash)
func (_Bridge *BridgeFilterer) FilterProposalExecution(opts *bind.FilterOpts) (*BridgeProposalExecutionIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "ProposalExecution")
	if err != nil {
		return nil, err
	}
	return &BridgeProposalExecutionIterator{contract: _Bridge.contract, event: "ProposalExecution", logs: logs, sub: sub}, nil
}

// WatchProposalExecution is a free log subscription operation binding the contract event 0x6018c584b8d99bafeda249b2429f5907d830e792222070c1b3a94aa76ee71677.
//
// Solidity: event ProposalExecution(uint8 originDomainID, uint64 depositNonce, bytes32 dataHash)
func (_Bridge *BridgeFilterer) WatchProposalExecution(opts *bind.WatchOpts, sink chan<- *BridgeProposalExecution) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "ProposalExecution")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeProposalExecution)
				if err := _Bridge.contract.UnpackLog(event, "ProposalExecution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProposalExecution is a log parse operation binding the contract event 0x6018c584b8d99bafeda249b2429f5907d830e792222070c1b3a94aa76ee71677.
//
// Solidity: event ProposalExecution(uint8 originDomainID, uint64 depositNonce, bytes32 dataHash)
func (_Bridge *BridgeFilterer) ParseProposalExecution(log types.Log) (*BridgeProposalExecution, error) {
	event := new(BridgeProposalExecution)
	if err := _Bridge.contract.UnpackLog(event, "ProposalExecution", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the Bridge contract.
type BridgeRoleGrantedIterator struct {
	Event *BridgeRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRoleGranted represents a RoleGranted event raised by the Bridge contract.
type BridgeRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bridge *BridgeFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*BridgeRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &BridgeRoleGrantedIterator{contract: _Bridge.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bridge *BridgeFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *BridgeRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRoleGranted)
				if err := _Bridge.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bridge *BridgeFilterer) ParseRoleGranted(log types.Log) (*BridgeRoleGranted, error) {
	event := new(BridgeRoleGranted)
	if err := _Bridge.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the Bridge contract.
type BridgeRoleRevokedIterator struct {
	Event *BridgeRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRoleRevoked represents a RoleRevoked event raised by the Bridge contract.
type BridgeRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bridge *BridgeFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*BridgeRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &BridgeRoleRevokedIterator{contract: _Bridge.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bridge *BridgeFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *BridgeRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRoleRevoked)
				if err := _Bridge.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bridge *BridgeFilterer) ParseRoleRevoked(log types.Log) (*BridgeRoleRevoked, error) {
	event := new(BridgeRoleRevoked)
	if err := _Bridge.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeStartKeygenIterator is returned from FilterStartKeygen and is used to iterate over the raw logs and unpacked data for StartKeygen events raised by the Bridge contract.
type BridgeStartKeygenIterator struct {
	Event *BridgeStartKeygen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeStartKeygenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeStartKeygen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeStartKeygen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeStartKeygenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeStartKeygenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeStartKeygen represents a StartKeygen event raised by the Bridge contract.
type BridgeStartKeygen struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterStartKeygen is a free log retrieval operation binding the contract event 0x24e723a5c27b62883404028b8dee9965934de6a46828cda2ff63bf9a5e65ce43.
//
// Solidity: event StartKeygen()
func (_Bridge *BridgeFilterer) FilterStartKeygen(opts *bind.FilterOpts) (*BridgeStartKeygenIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "StartKeygen")
	if err != nil {
		return nil, err
	}
	return &BridgeStartKeygenIterator{contract: _Bridge.contract, event: "StartKeygen", logs: logs, sub: sub}, nil
}

// WatchStartKeygen is a free log subscription operation binding the contract event 0x24e723a5c27b62883404028b8dee9965934de6a46828cda2ff63bf9a5e65ce43.
//
// Solidity: event StartKeygen()
func (_Bridge *BridgeFilterer) WatchStartKeygen(opts *bind.WatchOpts, sink chan<- *BridgeStartKeygen) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "StartKeygen")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeStartKeygen)
				if err := _Bridge.contract.UnpackLog(event, "StartKeygen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStartKeygen is a log parse operation binding the contract event 0x24e723a5c27b62883404028b8dee9965934de6a46828cda2ff63bf9a5e65ce43.
//
// Solidity: event StartKeygen()
func (_Bridge *BridgeFilterer) ParseStartKeygen(log types.Log) (*BridgeStartKeygen, error) {
	event := new(BridgeStartKeygen)
	if err := _Bridge.contract.UnpackLog(event, "StartKeygen", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Bridge contract.
type BridgeUnpausedIterator struct {
	Event *BridgeUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeUnpaused represents a Unpaused event raised by the Bridge contract.
type BridgeUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Bridge *BridgeFilterer) FilterUnpaused(opts *bind.FilterOpts) (*BridgeUnpausedIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &BridgeUnpausedIterator{contract: _Bridge.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Bridge *BridgeFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *BridgeUnpaused) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeUnpaused)
				if err := _Bridge.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Bridge *BridgeFilterer) ParseUnpaused(log types.Log) (*BridgeUnpaused, error) {
	event := new(BridgeUnpaused)
	if err := _Bridge.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
